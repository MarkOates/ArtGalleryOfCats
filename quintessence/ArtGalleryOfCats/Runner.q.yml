parent_classes:


  - class: AllegroFlare::Screens::Base
    scope: public
    init_with: ArtGalleryOfCats::Runner::TYPE


properties:


  - name: framework
    type: AllegroFlare::Frameworks::Full*
    init_with: nullptr
    constructor_arg: true

  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true

  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: model_bin
    type: AllegroFlare::ModelBin*
    init_with: nullptr
    constructor_arg: true

  - name: resources_path
    type: std::string
    init_with: '"[unset-resources_path]"'
    constructor_arg: true

  - name: router
    type: AllegroFlare::Routers::Standard
    init_with: ''

  - name: intro_logos_screen
    type: AllegroFlare::Screens::Storyboard
    init_with: ''

  - name: intro_storyboard_screen
    type: AllegroFlare::Screens::Storyboard
    init_with: ''

  - name: title_screen
    type: AllegroFlare::Screens::TitleScreen
    init_with: ''

  - name: achievements_screen
    type: AllegroFlare::Screens::Achievements
    init_with: ''

  - name: version_screen
    type: AllegroFlare::Screens::Version
    init_with: ''

  - name: new_game_intro_storyboard_screen
    type: AllegroFlare::Screens::Storyboard
    init_with: ''

  - name: level_select_screen
    type: AllegroFlare::Screens::LevelSelectScreen
    init_with: ''

  - name: game_over_screen
    type: AllegroFlare::Screens::GameOverScreen
    init_with: ''

  - name: game_won_screen
    type: AllegroFlare::Screens::GameWonScreen
    init_with: ''

  - name: npc_conversations_screen
    type: AllegroFlare::Screens::Storyboard
    init_with: ''

  - name: user_text_input_screen
    type: ArtGalleryOfCats::Screens::UserTextInput
    init_with: ''

  - name: game_won_outro_storyboard_screen
    type: AllegroFlare::Screens::Storyboard
    init_with: ''

  - name: rolling_credits_screen
    type: AllegroFlare::Screens::RollingCredits
    init_with: ''

  - name: primary_gameplay_screen
    type: ArtGalleryOfCats::Gameplay::Screen
    init_with: ''

  - name: solid_black_background
    type: AllegroFlare::Elements::Backgrounds::ClearToColor
    init_with: ALLEGRO_COLOR{0, 0, 0, 1}

  - name: light_blue_background
    type: AllegroFlare::Elements::Backgrounds::ClearToColor
    init_with: ALLEGRO_COLOR{148.0f/255, 191.0f/255, 226.0f/255, 1}

  - name: npc_conversations_background
    type: ArtGalleryOfCats::Elements::Backgrounds::NPCConversations
    init_with: '{}'

  - name: levels_list
    type: std::vector<std::pair<std::string, std::string>>
    init_with: '{}'

  - name: solved_level_names
    type: std::set<std::string>
    init_with: '{}'

  - name: release_info
    type: ReleaseInfo
    init_with: '{}'

  - name: initialized
    type: bool
    init_with: false

  - name: NPC_CONVERSATIONS_SCREEN
    type: char*
    init_with: '(char*)"npc_conversations_screen"'
    static: true
    constexpr: true

  - name: USER_TEXT_INPUT_SCREEN
    type: char*
    init_with: '(char*)"user_text_input_screen"'
    static: true
    constexpr: true

  - name: EVENT_ACTIVATE_PRIMARY_GAMEPLAY_SCREEN
    type: char*
    init_with: '(char*)"activate_primary_gameplay_screen"'
    static: true
    constexpr: true

  - name: TYPE
    type: char*
    init_with: '(char*)"ArtGalleryOfCats/Runner"'
    static: true
    constexpr: true


functions:


  - name: initialize
    guards:
      - (!initialized)
      - framework
      - event_emitter
      - bitmap_bin
      - font_bin
      - model_bin
    body: |

      AllegroFlare::SystemInfo HACK_system_info;
      std::string HACK_sysname = HACK_system_info.get_sysname();
      //if (system_is_a_mac)
      //{
         // TODO: WOrk out htis
      //}


      // Create the resources
      AllegroFlare::Achievements &achievements = framework->get_achievements_ref();
      AllegroFlare::AudioController &audio_controller = framework->get_audio_controller_ref();

      // Create a storyboard factory and page factory
      AllegroFlare::StoryboardFactory storyboard_factory;
      storyboard_factory.set_font_bin(font_bin);
      storyboard_factory.set_event_emitter(event_emitter);
      AllegroFlare::StoryboardPageFactory page_factory;
      page_factory.set_font_bin(font_bin);
      page_factory.set_bitmap_bin(bitmap_bin);
      page_factory.set_model_bin(model_bin);

      // Setup our router
      setup_router();

      // Set the framework to use our router
      framework->set_router(&router);

      // TODO: Setup achievements
      achievements.set_achievements({
         { "stay_through_the_credits",
            new AllegroFlare::Achievement("Stay Through the Credits", "Watch the credits"),
            false,
            false,
         },
         { "look_at_some_art",
            new AllegroFlare::Achievement("Beauty Beholder", "Observe some art in the gallery"),
            false,
            false,
         },
         { "solve_a_riddle",
            new AllegroFlare::Achievement("Riddle Wrangler", "Solve one of the riddles"),
            false,
            false,
         },
      });

      // TODO: Setup intro logos screen
      intro_logos_screen.set_event_emitter(event_emitter);
      intro_logos_screen.set_font_bin(font_bin);
      intro_logos_screen.set_auto_advance(true);
      intro_logos_screen.set_background(&solid_black_background);
      intro_logos_screen.initialize();
      intro_logos_screen.get_storyboard_element_ref().set_pages({
         page_factory.create_clubcatt_logo_page(),
         page_factory.create_image_page(bitmap_bin->operator[]("clubcatt-website-01.jpg")),
      });

      

      // TODO: Setup intro storyboard screen
      intro_storyboard_screen.set_event_emitter(event_emitter);
      intro_storyboard_screen.set_font_bin(font_bin);
      intro_storyboard_screen.set_auto_advance(true);
      intro_storyboard_screen.set_background(&solid_black_background);
      intro_storyboard_screen.initialize();

      // TODO: Setup title screen
      title_screen.set_event_emitter(event_emitter);
      title_screen.set_menu_options({
         //{ "Investigate", "start_new_game" },
         { "Start New Game", "start_new_game" },
                           //EVENT_ACTIVATE_PLATFORMING_2D_SCREEN }, //EVENT_ACTIVATE_NAME_YOUR_CHARACTER_SCREEN },
         //{ "Chronicle",      EVENT_OPEN_CHRONICLE_SCREEN },
         //{ "Driving",        EVENT_ACTIVATE_TILE_DRIVE_SCREEN },
         //{ "Platforming",    EVENT_ACTIVATE_PLATFORMING_2D_SCREEN },
         //{ "Investigate",    EVENT_ACTIVATE_INVESTIGATION_ROOM_SCREEN },
         { "Achievements",   "goto_achievements_screen" },
         //{ "Storyboard",     EVENT_ACTIVATE_CUT_IN_STORYBOARD_SCREEN},
         { "Version",        "goto_version_screen" },
         //{ "Credits",        EVENT_ACTIVATE_CREDITS_SCREEN },
         { "Quit",           "quit" },
      });
      title_screen.set_font_bin(font_bin);
      std::string copyright_text = "Â© 2023 CLUBCATT Games         clubcatt.com         version " + release_info.get_version();
      title_screen.set_copyright_text(copyright_text);
      title_screen.set_title_text("Art Gallery of Cats");
      title_screen.set_background(&solid_black_background);
      //title_screen.initialize(); // NOTE: Initialization is not necessary for this screen

      // TODO: Setup achievements screen
      achievements_screen.set_achievements(&achievements);
      achievements_screen.set_event_emitter(event_emitter);
      achievements_screen.set_font_bin(font_bin);
      achievements_screen.set_background(&solid_black_background);
      achievements_screen.initialize();

      // TODO: Setup version screen
      version_screen.set_bitmap_bin(bitmap_bin);
      version_screen.set_font_bin(font_bin);
      version_screen.set_model_bin(model_bin);
      version_screen.set_event_emitter(event_emitter);
      version_screen.set_background(&solid_black_background);
      version_screen.initialize();

      // TODO: Setup new game intro storyboard screen
      new_game_intro_storyboard_screen.set_event_emitter(event_emitter);
      new_game_intro_storyboard_screen.set_font_bin(font_bin);
      new_game_intro_storyboard_screen.set_background(&light_blue_background);
      new_game_intro_storyboard_screen.initialize();
      //new_game_intro_storyboard_screen.get_storyboard_element_ref().set_pages({
      new_game_intro_storyboard_screen.get_storyboard_element_ref().set_pages({
          create_image_page(
            "Hey there!"
          ),
          create_image_page(
             "My name is Mittens, and I want to welcome you to..."
          ),
          create_image_page(
             "drumroll please..."
          ),
          create_image_page(
             "The Art Gallery of Cats!"
          ),
          create_image_page(
             "(It has a nice ring to it, doesn't it?)"
          ),
          create_image_page(
             "I, Mittens, will be your guide."
          ),
          create_image_page(
             "Thank you for being our guest! Feel free to look through all of our galleries."
          ),
          create_image_page(
             "You can use the keyboard and mouse to move around."
          ),
          create_image_page(
             "Move with the ARROW keys, and look around using the mouse."
          ),
          create_image_page(
             "Please take all the time you need and a look at all the wonderful art."
          ),
          create_image_page(
             "Inspect the art by pressing the \"I\" key to get more information."
          ),
          create_image_page(
             "I always have something to say. Art is one of my most favorite things!"
          ),
          create_image_page(
             "Oh, and there are riddles to solve, too!"
          ),
          create_image_page(
             "So, each gallery has a riddle."
          ),
          create_image_page(
             "At any time, you can show and hide the riddle by pressing the \"R\" key."
          ),
          create_image_page(
             "\"R\" for riddle!"
          ),
          create_image_page(
             "Whenever you're ready, you can try to answer the riddle by pressing the \"S\" key."
          ),
          create_image_page(
             "\"S\" for solve!"
          ),
          create_image_page(
             "I'll be around to help you every step of the way, so don't worry."
          ),
          create_image_page(
             "Hmm... was there anything else?"
          ),
          create_image_page(
             "Nope! That's pretty much it!"
          ),
          create_image_page(
             "How about we take a look in our first gallery, huh?"
          ),
          create_image_page(
             "Let's go!"
          ),
      });
          //page_factory.create_advancing_text_page(
            //"With nothing but a trusty sword and his wits to guide him, he sets out to face whatever dangers "
               //"lie ahead."
          //),



      // Setup the npc_conversations_screen_background
      npc_conversations_background.set_inv_scale(1);
      npc_conversations_background.set_bitmap_bin(bitmap_bin);
      npc_conversations_background.initialize();

      // Setup the npc_conversations_screen
      npc_conversations_screen.set_event_emitter(event_emitter);
      npc_conversations_screen.set_font_bin(font_bin);
      npc_conversations_screen.set_background(&npc_conversations_background);
      npc_conversations_screen.initialize();
      npc_conversations_screen.get_storyboard_element_ref().set_pages({
          create_image_page(
          //page_factory.create_advancing_text_page(
            "Hmm. There's a chart over there."
             //I guess I would be.",
            //"I really like all this art! It nourishes the spirit. It ignites the soul!"
          //),
          ),
          create_image_page(
          //page_factory.create_advancing_text_page(
             "I guess if I were a human, I'd be 25 years old."
          ),
      });


      // Setup the "user_text_input_screen"
      user_text_input_screen.set_font_bin(font_bin);
      user_text_input_screen.set_font_size(-40);
      user_text_input_screen.set_event_emitter(event_emitter);
      user_text_input_screen.initialize();
      // Use "keyboard" mode (keyboard keys will type characters)
      user_text_input_screen.set_mode_to_using_keyboard();


      levels_list = {
         //{ "Candy Kingdom", "candy_kingdom" },
         //{ "Cherry Blossom Grove", "cherry_blossom_grove" },
         //{ "Bubble Pop Bay", "bubble_pop_bay" },
         //{ "Neon City Nights", "neon_city_nights" },
         //{ "Wonderland Woods", "wonderland_woods" },
         { "Gallery 1", "gallery_01" },
         { "Gallery 2", "gallery_02" },
         //{ "3", "bubble_pop_bay" },
         //{ "4", "neon_city_nights" },
         //{ "5", "wonderland_woods" },
      };



      // TODO: Setup level select screen
      level_select_screen.set_event_emitter(event_emitter);
      level_select_screen.set_bitmap_bin(bitmap_bin);
      level_select_screen.set_font_bin(font_bin);
      level_select_screen.set_levels_list(levels_list); //{
         //{ "Candy Kingdom", "candy_kingdom" },
         //{ "Cherry Blossom Grove", "cherry_blossom_grove" },
         //{ "Bubble Pop Bay", "bubble_pop_bay" },
         //{ "Neon City Nights", "neon_city_nights" },
         //{ "Wonderland Woods", "wonderland_woods" },
         //{ "Gallery 1", "gallery_01" },
         //{ "Gallery 2", "gallery_02" },
         //{ "3", "bubble_pop_bay" },
         //{ "4", "neon_city_nights" },
         //{ "5", "wonderland_woods" },
      //});
      level_select_screen.set_background(&solid_black_background);
      level_select_screen.get_level_select_element_ref().set_ignore_on_invalid_selection(true);
      level_select_screen.initialize();

      // TODO: Setup game over screen
      game_over_screen.set_background(&solid_black_background);
      game_over_screen.initialize();

      // TODO: Setup game won screen
      game_won_screen.set_background(&solid_black_background);
      game_won_screen.set_font_bin(font_bin);
      //game_won_screen.initialize(); // NOTE: Initialization is not necessary for this screen

      // TODO: Setup game won outro storyboard screen
      game_won_outro_storyboard_screen.set_event_emitter(event_emitter);
      game_won_outro_storyboard_screen.set_background(&light_blue_background);
      game_won_outro_storyboard_screen.set_font_bin(font_bin);
      game_won_outro_storyboard_screen.get_storyboard_element_ref().set_pages({
          create_image_page(
             "Oh wow!"
          ),
          create_image_page(
             "You solved all the riddles!"
          ),
          create_image_page(
             "Amazing! Congratulations! Wonderful!"
          ),
          create_image_page(
             "You've been such a brilliant guest! We've been so lucky to have you."
          ),
          create_image_page(
             "We'd love it if you decided to stop by again."
          ),
          create_image_page(
             "For you, we're open any time!"
          ),
          create_image_page(
             "You can stop by the giftshop on your way out, too, at clubcatt.com!"
          ),
          create_image_page(
             "Most of all, I hope you enjoyed your time here at the Art Gallery of Cats!"
          ),
          create_image_page(
             "Take care meow!"
          ),
          //page_factory.create_advancing_text_page(
            //"Well that was a wonderful adventure. I hope you enjoyed your time here at the Art Gallery of Cats.",
          //),
      });
      game_won_outro_storyboard_screen.initialize();


      // TODO: Setup rolling credits screen
      AllegroFlare::Elements::RollingCredits::SectionFactory section_factory;
      rolling_credits_screen.set_event_emitter(event_emitter); // NEEDED in startup template
      rolling_credits_screen.set_font_bin(font_bin);
      rolling_credits_screen.set_background(&solid_black_background);
      rolling_credits_screen.set_sections({
         section_factory.create_text(
            "And thank you for playing."
         ),
      });
      rolling_credits_screen.initialize();


      // Setup our main gameplay screen
      primary_gameplay_screen.set_event_emitter(event_emitter);
      primary_gameplay_screen.set_bitmap_bin(bitmap_bin);
      primary_gameplay_screen.set_font_bin(font_bin);
      primary_gameplay_screen.set_model_bin(model_bin);
      primary_gameplay_screen.set_resources_path(resources_path);
      primary_gameplay_screen.set_user_text_input_screen(&user_text_input_screen);
      primary_gameplay_screen.set_npc_conversations_screen(&npc_conversations_screen);
      primary_gameplay_screen.set_solved_level_names(&solved_level_names);
      primary_gameplay_screen.set_HACK_sysname(HACK_sysname);

      primary_gameplay_screen.initialize();

      // TODO: Load up our sound effects
      audio_controller.set_and_load_sound_effect_elements({
         { "wrong_answer", { "wrong_answer-02.ogg", false, "restart" } },

         // { "menu_move", { "menu_move_tink-02.ogg", false, "restart" } }, // TODO: Throw on an unknown replay type
      });

      // TODO: Load up our music tracks
      audio_controller.set_and_load_music_track_elements({
         // An example of how to load a music track:
         //{ "intro_music", { "wanderer-01.ogg", true, "ignore" } },
         { "main_music", { "carpe_diem.ogg", true, "ignore" } },
         { "soaring",    { "soaring.ogg", true, "ignore" } },
      });

      // An example of how to play a music track:
      event_emitter->emit_play_music_track_event("main_music");

      return;
    body_dependency_symbols:
      - AllegroFlare::SystemInfo
      - AllegroFlare::StoryboardFactory
      - AllegroFlare::Color
      - AllegroFlare::Elements::RollingCredits::SectionFactory


  - name: setup_router
    body: |
      router.set_screen_manager(&framework->get_screen_manager_ref());
      router.set_event_emitter(event_emitter);

      // Set the "load_level" handler
      router.set_load_level_handler([this](AllegroFlare::RouteEventDatas::Base* route_event_data) -> bool {
         // TODO: Fill in the body of this function:
         // TODO: Validate route_event_data is non-void
         // TODO: Validate route_event_data is StartLevel type

         AllegroFlare::RouteEventDatas::StartLevel *as_start_level =
            static_cast<AllegroFlare::RouteEventDatas::StartLevel*>(route_event_data);

         std::string level_identifier_to_load = as_start_level->get_level_identifier();

         // TODO: Modify this design to emit a level loading event, instead of loading here explicitly.
         primary_gameplay_screen.load_level_by_identifier(level_identifier_to_load);

         // TODO: Improve design and address a "return false" if the level did not load or does not exist
         // TODO: Address concern that return type of lambda may not be the same signature of the load_level_handler
         return true;
      });

      // Set the routes
      router.register_screen(
         AllegroFlare::Routers::Standard::INTRO_LOGOS_SCREEN_IDENTIFIER,
         &intro_logos_screen
      );
      router.register_screen(
         AllegroFlare::Routers::Standard::INTRO_STORYBOARD_SCREEN_IDENTIFIER,
         &intro_storyboard_screen
      );
      router.register_screen(
         AllegroFlare::Routers::Standard::TITLE_SCREEN_IDENTIFIER,
         &title_screen
      );
      router.register_screen(
         AllegroFlare::Routers::Standard::ACHIEVEMENTS_SCREEN_IDENTIFIER,
         &achievements_screen
      );
      router.register_screen(
         AllegroFlare::Routers::Standard::VERSION_SCREEN_IDENTIFIER,
         &version_screen
      );
      router.register_screen(
         AllegroFlare::Routers::Standard::NEW_GAME_INTRO_STORYBOARD_SCREEN_IDENTIFIER,
         &new_game_intro_storyboard_screen
      );
      router.register_screen(
         AllegroFlare::Routers::Standard::LEVEL_SELECT_SCREEN_IDENTIFIER,
         &level_select_screen
      );
      router.register_screen(
         AllegroFlare::Routers::Standard::GAME_OVER_SCREEN_IDENTIFIER,
         &game_over_screen
      );
      router.register_screen(
         AllegroFlare::Routers::Standard::GAME_WON_SCREEN_IDENTIFIER,
         &game_won_screen
      );
      router.register_screen(
         AllegroFlare::Routers::Standard::GAME_WON_OUTRO_STORYBOARD_SCREEN_IDENTIFIER,
         &game_won_outro_storyboard_screen
      );
      router.register_screen(
         AllegroFlare::Routers::Standard::CREDITS_SCREEN_IDENTIFIER,
         &rolling_credits_screen
      );
      router.register_screen(
         AllegroFlare::Routers::Standard::PRIMARY_GAMEPLAY_SCREEN_IDENTIFIER,
         &primary_gameplay_screen
      );
      router.register_screen(
         NPC_CONVERSATIONS_SCREEN,
         &npc_conversations_screen
      );
      router.register_screen(
         USER_TEXT_INPUT_SCREEN,
         &user_text_input_screen
      );

      // Set the callbacks
      intro_logos_screen.set_on_finished_callback_func(
         [this](AllegroFlare::Screens::Storyboard* screen, void* data) {
            this->router.emit_route_event(
               AllegroFlare::Routers::Standard::EVENT_INTRO_LOGOS_SCREEN_FINISHED,
               nullptr,
               al_get_time()
            );
         }
      );
      intro_storyboard_screen.set_on_finished_callback_func(
         [this](AllegroFlare::Screens::Storyboard* screen, void* data) {
            this->router.emit_route_event(
               AllegroFlare::Routers::Standard::EVENT_INTRO_STORYBOARD_SCREEN_FINISHED,
               nullptr,
               al_get_time()
            );
         }
      );
      new_game_intro_storyboard_screen.set_on_finished_callback_func(
         [this](AllegroFlare::Screens::Storyboard* screen, void* data) {
            this->router.emit_route_event(
               AllegroFlare::Routers::Standard::EVENT_NEW_GAME_INTRO_STORYBOARD_SCREEN_FINISHED,
               nullptr,
               al_get_time()
            );
         }
      );
      level_select_screen.set_on_menu_choice_callback_func(
         [this](AllegroFlare::Screens::LevelSelectScreen* screen, void* data) {
            // TODO: validate "screen" is non-void

            std::string selected_menu_option_value = screen->infer_current_menu_option_value();

            AllegroFlare::RouteEventDatas::StartLevel *route_event_data = new AllegroFlare::RouteEventDatas::StartLevel;
            route_event_data->set_level_identifier(selected_menu_option_value);

            this->router.emit_route_event(
               AllegroFlare::Routers::Standard::EVENT_START_LEVEL,
               route_event_data,
               al_get_time()
            );
         }
      );
      primary_gameplay_screen.set_on_finished_callback_func(
         [this](ArtGalleryOfCats::Gameplay::Screen* screen, void* data) {
            this->router.emit_route_event(
               AllegroFlare::Routers::Standard::EVENT_PRIMARY_GAMEPLAY_SCREEN_FINISHED,
               nullptr,
               al_get_time()
            );
         }
      );
      game_won_outro_storyboard_screen.set_on_finished_callback_func(
         [this](AllegroFlare::Screens::Storyboard* screen, void* data) {
            this->router.emit_route_event(
               AllegroFlare::Routers::Standard::EVENT_GAME_WON_OUTRO_STORYBOARD_SCREEN_FINISHED,
               nullptr,
               al_get_time()
            );
         }
      );
      // TODO: Add this
      //game_won_screen.set_on_submit_callback_func( // NEEDED in base template
         //[this](AllegroFlare::Screens::GameWonScreen* screen, void* data) {
            //this->router.emit_route_event(
               //AllegroFlare::Routers::Standard::EVENT_ACTIVATE_TITLE_SCREEN,
               //nullptr,
               //al_get_time()
            //);
         //}
      //);
      rolling_credits_screen.set_on_finished_callback_func(
         [this](AllegroFlare::Screens::RollingCredits* screen, void* data) {
            this->router.emit_route_event(
               AllegroFlare::Routers::Standard::EVENT_CREDITS_SCREEN_FINISHED,
               nullptr,
               al_get_time()
            );
         }
      );
      title_screen.set_on_finished_callback_func(
         [this](AllegroFlare::Screens::TitleScreen* screen, void* data) {
            this->router.emit_route_event(
               AllegroFlare::Routers::Standard::EVENT_TITLE_SCREEN_FINISHED,
               nullptr,
               al_get_time()
            );
         }
      );
      title_screen.set_on_menu_choice_callback_func(
         [this](AllegroFlare::Screens::TitleScreen* screen, void* data) {
            std::string menu_choice = screen->infer_current_menu_option_value();

            if (menu_choice == "start_new_game")
            {
               this->router.emit_route_event(
                  AllegroFlare::Routers::Standard::EVENT_START_NEW_GAME,
                  nullptr,
                  al_get_time()
               );
            }
            else if (menu_choice == "quit")
            {
               this->router.emit_route_event(
                  AllegroFlare::Routers::Standard::EVENT_EXIT_GAME,
                  nullptr,
                  al_get_time()
               );
            }
            else if (menu_choice == "goto_achievements_screen")
            {
               this->router.emit_route_event(
                  AllegroFlare::Routers::Standard::EVENT_ACTIVATE_ACHIEVEMENTS_SCREEN,
                  nullptr,
                  al_get_time()
               );
            }
            else if (menu_choice == "goto_version_screen")
            {
               this->router.emit_route_event(
                  AllegroFlare::Routers::Standard::EVENT_ACTIVATE_VERSION_SCREEN,
                  nullptr,
                  al_get_time()
               );
            }
            else
            {
               AllegroFlare::Logger::throw_error("Foobar", "baz");
            }
         }
      );
      achievements_screen.set_on_exit_callback_func(
         [this](AllegroFlare::Screens::Achievements* screen, void* data) {
            // TODO: This should be a push/pop'd screen
            this->router.emit_route_event(
               AllegroFlare::Routers::Standard::EVENT_ACTIVATE_TITLE_SCREEN,
               nullptr,
               al_get_time()
            );
         }
      );
      version_screen.set_on_exit_callback_func(
         [this](AllegroFlare::Screens::Version* screen, void* data) {
            // TODO: This should be a push/pop'd screen
            this->router.emit_route_event(
               AllegroFlare::Routers::Standard::EVENT_ACTIVATE_TITLE_SCREEN,
               nullptr,
               al_get_time()
            );
         }
      );
      npc_conversations_screen.set_on_finished_callback_func(
         [this](AllegroFlare::Screens::Storyboard* screen, void* data) {
            this->router.emit_route_event(
               AllegroFlare::Routers::Standard::EVENT_ACTIVATE_PRIMARY_GAMEPLAY_SCREEN,
               nullptr,
               al_get_time()
            );
         }
      );

      return;
    body_dependency_symbols:
      - AllegroFlare::Logger
      - AllegroFlare::RouteEventDatas::StartLevel


  - name: run
    parameters:
      - name: deployment_environment_mode
        type: std::string
        default_argument: '"[unset-deployment_environment_mode]"'
    static: true
    body: |
      // setup the framework
      AllegroFlare::Frameworks::Full framework;
      framework.set_deployment_environment(deployment_environment_mode);
      framework.disable_escape_key_will_shutdown();
      framework.initialize();

      // instantiate our actual game runner
      Runner runner(
         &framework,
         &framework.get_event_emitter_ref(),
         &framework.get_bitmap_bin_ref(),
         &framework.get_font_bin_ref(),
         &framework.get_model_bin_ref(),
         framework.get_data_folder_path()
      );
      runner.initialize();
      framework.register_screen("runner", &runner);

      framework.run_loop();
      return;
    body_dependency_symbols:
      - AllegroFlare::Frameworks::Full


  - name: game_event_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: AllegroFlare::GameEvent*
        default_argument: nullptr
    guards: [ ev, event_emitter ]
    body: |
      // NOTE: This is an older way to handle this signal flow, specifically for submitting the user input text. For
      // now, for this hackathon, it should work fine.
      if (ev->is_type(AllegroFlare::SoftwareKeyboard::SoftwareKeyboard::DEFAULT_EVENT_TO_EMIT_ON_PRESSING_OK_KEY))
      {
         // Extract the user's input string
         std::string text_input_value = user_text_input_screen.get_result_string_value();

         // Assign the user input string into the "primary_gameplay_screen" for usage
         primary_gameplay_screen.set_last_user_text_input_value(text_input_value);

         // Activate the primary gameplay screen
         // TODO: test this
         this->router.emit_route_event(
            AllegroFlare::Routers::Standard::EVENT_ACTIVATE_PRIMARY_GAMEPLAY_SCREEN,
            nullptr,
            al_get_time()
         );
      }
      else if (ev->is_type("riddle_is_solved"))
      {
         // TODO: Figure out what to do here, probably load the next level, or, if there are no more levels show
         // game won screen

         bool this_was_the_last_level = false;

         if (solved_level_names.size() == levels_list.size()) this_was_the_last_level = true;

         //bool this_was_the_last_level = true;
         if (this_was_the_last_level)
         {
            this->router.emit_route_event(
               AllegroFlare::Routers::Standard::EVENT_ACTIVATE_GAME_WON_OUTRO_STORYBOARD_SCREEN,
               nullptr,
               al_get_time()
            );
         }
         else
         {
            // If it's solved, don't do anything.  The dialog will tell you to return with the ESC key.
            //this->router.emit_route_event(
               //AllegroFlare::Routers::Standard::EVENT_ACTIVATE_LEVEL_SELECT_SCREEN,
               //nullptr,
               //al_get_time()
            //);
         }
      }

      return;


  - name: create_image_page
    parameters:
      - name: text
        type: std::string
        default_argument: '"[unset-text]"'
    type: AllegroFlare::Elements::StoryboardPages::ImageWithAdvancingText*
    body: |
      AllegroFlare::Elements::StoryboardPages::ImageWithAdvancingText *result =
         new AllegroFlare::Elements::StoryboardPages::ImageWithAdvancingText();
      result->set_bitmap_bin(bitmap_bin);
      result->set_font_bin(font_bin);
      result->set_text(text);
      result->set_font_size(-50);
      result->set_line_height_multiplier(1.25f);
      result->set_image_fade_in_duration_sec(0.0f);
      result->set_text_color(ALLEGRO_COLOR{0, 0, 0, 1});
      result->set_image_identifier("character-avatar-01.png");
      //"storyboard-1-01-1165x500.png");
      result->set_top_padding(650);
      result->set_left_padding(600);
      result->set_right_padding(600);
      return result;
    body_dependency_symbols:
      - ALLEGRO_COLOR


dependencies:


  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::Frameworks::Full
    headers: [ AllegroFlare/Frameworks/Full.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]
  - symbol: AllegroFlare::GameEvent
    headers: [ AllegroFlare/GameEvent.hpp ]
  - symbol: CubeShooter::Screen
    headers: [ CubeShooter/Screen.hpp ]
  - symbol: AllegroFlare::Routers::Standard
    headers: [ AllegroFlare/Routers/Standard.hpp ]
  - symbol: AllegroFlare::Screens::Storyboard
    headers: [ AllegroFlare/Screens/Storyboard.hpp ]
  - symbol: AllegroFlare::Screens::Achievements
    headers: [ AllegroFlare/Screens/Achievements.hpp ]
  - symbol: AllegroFlare::Screens::TitleScreen
    headers: [ AllegroFlare/Screens/TitleScreen.hpp ]
  - symbol: AllegroFlare::Screens::GameOverScreen
    headers: [ AllegroFlare/Screens/GameOverScreen.hpp ]
  - symbol: AllegroFlare::Screens::GameWonScreen
    headers: [ AllegroFlare/Screens/GameWonScreen.hpp ]
  - symbol: AllegroFlare::Screens::RollingCredits
    headers: [ AllegroFlare/Screens/RollingCredits.hpp ]
  - symbol: AllegroFlare::Screens::Version
    headers: [ AllegroFlare/Screens/Version.hpp ]
  - symbol: AllegroFlare::Achievements
    headers: [ AllegroFlare/Achievements.hpp ]
  - symbol: AllegroFlare::StoryboardFactory
    headers: [ AllegroFlare/StoryboardFactory.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: AllegroFlare::Screens::LevelSelectScreen
    headers: [ AllegroFlare/Screens/LevelSelectScreen.hpp ]
  - symbol: AllegroFlare::RouteEventDatas::StartLevel
    headers: [ AllegroFlare/RouteEventDatas/StartLevel.hpp ]
  - symbol: ArtGalleryOfCats::Gameplay::Screen
    headers: [ ArtGalleryOfCats/Gameplay/Screen.hpp ]
  - symbol: AllegroFlare::Color
    headers: [ AllegroFlare/Color.hpp ]
  - symbol: AllegroFlare::Elements::Backgrounds::ClearToColor
    headers: [ AllegroFlare/Elements/Backgrounds/ClearToColor.hpp ]
  - symbol: ReleaseInfo
    headers: [ ReleaseInfo.hpp ]
  - symbol: ArtGalleryOfCats::Elements::Backgrounds::NPCConversations
    headers: [ ArtGalleryOfCats/Elements/Backgrounds/NPCConversations.hpp ]
  - symbol: AllegroFlare::Elements::StoryboardPages::ImageWithAdvancingText
    headers: [ AllegroFlare/Elements/StoryboardPages/ImageWithAdvancingText.hpp ]
  - symbol: ArtGalleryOfCats::Screens::UserTextInput
    headers: [ ArtGalleryOfCats/Screens/UserTextInput.hpp ]
  - symbol: AllegroFlare::Elements::RollingCredits::SectionFactory
    headers: [ AllegroFlare/Elements/RollingCredits/SectionFactory.hpp ]
  - symbol: AllegroFlare::SystemInfo
    headers: [ AllegroFlare/SystemInfo.hpp ]


