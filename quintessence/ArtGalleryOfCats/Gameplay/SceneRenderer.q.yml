properties:


  - name: entity_pool
    type: AllegroFlare::SceneGraph::EntityPool*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true


functions:


  - name: render
    guards: [ entity_pool ]
    body: |
      // Extract out the camera and render the scene
      AllegroFlare::SceneGraph::Entities::Base *entity = entity_pool->find_with_attribute("primary_camera");
      if (!entity) throw std::runtime_error("no camera present");
      ArtGalleryOfCats::Gameplay::Entities::Camera3D *as_camera =
         static_cast<ArtGalleryOfCats::Gameplay::Entities::Camera3D*>(entity);

      ALLEGRO_BITMAP *render_surface = al_get_backbuffer(al_get_current_display()); // TODO: replace with render surface
      al_clear_depth_buffer(1);
      al_clear_to_color(ALLEGRO_COLOR{0.1, 0.105, 0.12, 1.0});

      as_camera->setup_projection_on(render_surface);

      // TODO: validate the camera is of type Entities::Camera
      // TODO: here

      //std::unordered_set<AllegroFlare::SceneGraph::Entities::Base*>
      for (auto &entity : entity_pool->get_entity_pool_ref())
      {
         ArtGalleryOfCats::Gameplay::Entities::Base *as_agc_entity =
            static_cast<ArtGalleryOfCats::Gameplay::Entities::Base*>(entity);

         AllegroFlare::Model3D *model = as_agc_entity->get_model();
         if (model)
         {
            ALLEGRO_BITMAP *texture = as_agc_entity->get_texture();
            if (texture) model->set_texture(texture);
            model->draw();
         }
      }

      //as_camera->start_reverse_transform();
      return;
    body_dependency_symbols:
      - ArtGalleryOfCats::Gameplay::Entities::Base
      - ArtGalleryOfCats::Gameplay::Entities::Camera3D


dependencies:


  - symbol: ArtGalleryOfCats::Gameplay::Entities::Base
    headers: [ ArtGalleryOfCats/Gameplay/Entities/Base.hpp ]
  - symbol: ArtGalleryOfCats::Gameplay::Entities::Camera3D
    headers: [ ArtGalleryOfCats/Gameplay/Entities/Camera3D.hpp ]
  - symbol: AllegroFlare::SceneGraph::EntityPool
    headers: [ AllegroFlare/SceneGraph/EntityPool.hpp ]


