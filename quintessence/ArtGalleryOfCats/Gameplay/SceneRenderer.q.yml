properties:


  - name: cubemap_shader
    type: AllegroFlare::Shaders::Cubemap*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: entity_pool
    type: AllegroFlare::SceneGraph::EntityPool*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true


functions:


  - name: render
    guards: [ entity_pool, cubemap_shader ]
    body: |
      // Extract out the camera and render the scene
      AllegroFlare::SceneGraph::Entities::Base *entity = entity_pool->find_with_attribute("primary_camera");
      if (!entity) throw std::runtime_error("no camera present");
      ArtGalleryOfCats::Gameplay::Entities::Camera3D *as_camera =
         static_cast<ArtGalleryOfCats::Gameplay::Entities::Camera3D*>(entity);

      ALLEGRO_BITMAP *render_surface = al_get_backbuffer(al_get_current_display()); // TODO: replace with render surface
      al_clear_depth_buffer(1);
      al_clear_to_color(ALLEGRO_COLOR{0.1, 0.105, 0.12, 1.0});

      as_camera->setup_projection_on(render_surface);

      // TODO: validate the camera is of type Entities::Camera
      // TODO: here


      // Set the camera position in the iridescent shder
      cubemap_shader->set_camera_position(as_camera->get_real_position());


      //std::unordered_set<AllegroFlare::SceneGraph::Entities::Base*>
      for (auto &entity : entity_pool->get_entity_pool_ref())
      {
         ArtGalleryOfCats::Gameplay::Entities::Base *as_agc_entity =
            static_cast<ArtGalleryOfCats::Gameplay::Entities::Base*>(entity);

         AllegroFlare::Model3D *model = as_agc_entity->get_model();
         if (model)
         {
            // Collect render flags
            bool renders_with_iridescent =
               //true;
               as_agc_entity->exists(ArtGalleryOfCats::Gameplay::EntityFlags::RENDERS_WITH_IRIDESCENT);

            // Setup the render for this object
            if (renders_with_iridescent)
            {
               ArtGalleryOfCats::Gameplay::Entities::Base *as_gac_base =
                  static_cast<ArtGalleryOfCats::Gameplay::Entities::Base*>(entity);
               cubemap_shader->set_object_placement(&as_gac_base->get_placement_ref()); // NOTE: For now, this has to be set before activating the shader

               cubemap_shader->activate();
            }
            else
            {
               ALLEGRO_BITMAP *texture = as_agc_entity->get_texture();
               if (texture) model->set_texture(texture);
               as_agc_entity->get_placement_ref().start_transform();
            }

            // Draw the model
            model->draw();

            // Teardown the render for this object
            if (renders_with_iridescent)
            {
               cubemap_shader->deactivate();
               // TODO: turn off shader
            }
            else
            {
               as_agc_entity->get_placement_ref().restore_transform();
            }
         }
         else // (!model)
         {
            ALLEGRO_BITMAP *texture = as_agc_entity->get_texture();
            //if (texture) model->set_texture(texture);

            if (texture)
            {
               as_agc_entity->get_placement_ref().start_transform();

               AllegroFlare::Placement3D inner_transform;
               inner_transform.scale = { 0.001, 0.001, 0.001 };
               inner_transform.start_transform();
               al_draw_bitmap(texture, 0, 0, 0);
               inner_transform.restore_transform();

               as_agc_entity->get_placement_ref().restore_transform();
            }
         }
      }

      //as_camera->start_reverse_transform();
      return;
    body_dependency_symbols:
      - ArtGalleryOfCats::Gameplay::Entities::Base
      - ArtGalleryOfCats::Gameplay::Entities::Camera3D
      - ArtGalleryOfCats::Gameplay::EntityFlags


dependencies:


  - symbol: ArtGalleryOfCats::Gameplay::Entities::Base
    headers: [ ArtGalleryOfCats/Gameplay/Entities/Base.hpp ]
  - symbol: ArtGalleryOfCats::Gameplay::Entities::Camera3D
    headers: [ ArtGalleryOfCats/Gameplay/Entities/Camera3D.hpp ]
  - symbol: AllegroFlare::SceneGraph::EntityPool
    headers: [ AllegroFlare/SceneGraph/EntityPool.hpp ]
  - symbol: AllegroFlare::Shaders::Cubemap
    headers: [ AllegroFlare/Shaders/Cubemap.hpp ]
  - symbol: ArtGalleryOfCats::Gameplay::EntityFlags
    headers: [ ArtGalleryOfCats/Gameplay/EntityFlags.hpp ]


