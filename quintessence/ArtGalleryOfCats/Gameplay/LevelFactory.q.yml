properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: model_bin
    type: AllegroFlare::ModelBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: entity_pool
    type: AllegroFlare::SceneGraph::EntityPool*
    init_with: '{}'
    constructor_arg: true
    getter: true
    setter: true


functions:


  - name: object_parsed_callback
    static: true
    type: void
    parameters:
      - name: name_property
        type: std::string
        default_argument: '"[unset-name_property]"'
      - name: class_property
        type: std::string
        default_argument: '"[unset-class_property]"'
      - name: x_property
        type: float
        default_argument: 0.0f
      - name: y_property
        type: float
        default_argument: 0.0f
      - name: width_property
        type: float
        default_argument: 0.0f
      - name: height_property
        type: float
        default_argument: 0.0f
      - name: custom_properties
        type: std::vector<std::pair<std::string, std::string>>
        default_argument: '{}'
      - name: user_data
        type: void*
        default_argument: nullptr
    guards: [ user_data ]
    body: |
      ArtGalleryOfCats::Gameplay::LevelFactory *this_factory =
         static_cast<ArtGalleryOfCats::Gameplay::LevelFactory*>(user_data);
      AllegroFlare::SceneGraph::EntityPool &entity_pool = *(this_factory->entity_pool);
      ArtGalleryOfCats::Gameplay::EntityFactory entity_factory;
      entity_factory.set_model_bin(this_factory->model_bin);
      entity_factory.set_bitmap_bin(this_factory->bitmap_bin);

      ArtGalleryOfCats::Gameplay::Entities::Base* art = entity_factory.create_art(
         name_property, //"art-01",
         "art-01.obj",
         "art-01.png",
         { x_property, 0, y_property },
         0.0f,
         {}
      );
      entity_pool.add(art);

      std::cout << "-------- " << custom_properties.size() << std::endl; // DEBUGGING
      
      // TODO: This function
      return;
    body_dependency_symbols:
      - ArtGalleryOfCats::Gameplay::LevelFactory


  - name: load_primary_map
    guards: [ bitmap_bin, model_bin, entity_pool ]
    body: |
      ArtGalleryOfCats::Gameplay::EntityFactory entity_factory;
      entity_factory.set_model_bin(model_bin);
      entity_factory.set_bitmap_bin(bitmap_bin);

      // Define our source TMJ filename
      std::string tmj_source_filename = "tests/fixtures/maps/gallery-map-06.tmj";

      // Create the environment visual mesh
      ArtGalleryOfCats::Gameplay::Entities::Base* environment_mesh = entity_factory.create_environment_mesh(
         "gallery-map-05.obj",
         "gallery-map-05.png"
      );
      entity_pool->add(environment_mesh);

      // Create the environment visual mesh
      ArtGalleryOfCats::Gameplay::Entities::CollisionTileMap* collision_tile_map =
         entity_factory.create_collision_tile_map(tmj_source_filename);
      collision_tile_map->set("collision_tile_map");
      entity_pool->add(collision_tile_map);

      // Create the camera, define it as the primary camera
      ArtGalleryOfCats::Gameplay::Entities::Camera3D* camera = entity_factory.create_camera();
      camera->set("primary_camera");
      entity_pool->add(camera);

      // Move our camera to the "spawn point"
      AllegroFlare::Vec2D spawn_point = { 11, 18 }; // TODO: Update this spawn point to pull from map
      camera->get_placement_ref().position.x = spawn_point.x;
      camera->get_placement_ref().position.z = spawn_point.y;

      // Create a collectable
      ArtGalleryOfCats::Gameplay::Entities::Base* collectable_object = entity_factory.create_collectable_object(
         AllegroFlare::Vec3D(24.0, 0.5, 17.0),
         "rounded_unit_cube-01.obj"
      );
      entity_pool->add(collectable_object);

      // Create an art
      /*
      ArtGalleryOfCats::Gameplay::Entities::Base* art = entity_factory.create_art(
         "art-01",
         "art-01.obj",
         "art-01.png",
         { 14, 0, 12 },
         0.0f,
         {}
      );
      entity_pool->add(art);
      */

      // Load objects from the TMJ file
      ArtGalleryOfCats::Gameplay::TMJObjectLoader tmj_object_loader(tmj_source_filename);
      tmj_object_loader.set_object_parsed_callback(object_parsed_callback);
      tmj_object_loader.set_object_parsed_callback_user_data(this);
      tmj_object_loader.load();

      return;
    body_dependency_symbols:
      - ArtGalleryOfCats::Gameplay::EntityFactory
      - ArtGalleryOfCats::Gameplay::EntityFlags
      - ArtGalleryOfCats::Gameplay::TMJObjectLoader


dependencies:


  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]
  - symbol: ArtGalleryOfCats::Gameplay::EntityFactory
    headers: [ ArtGalleryOfCats/Gameplay/EntityFactory.hpp ]
  - symbol: AllegroFlare::SceneGraph::EntityPool
    headers: [ AllegroFlare/SceneGraph/EntityPool.hpp ]
  - symbol: ArtGalleryOfCats::Gameplay::EntityFlags
    headers: [ ArtGalleryOfCats/Gameplay/EntityFlags.hpp ]
  - symbol: ArtGalleryOfCats::Gameplay::TMJObjectLoader
    headers: [ ArtGalleryOfCats/Gameplay/TMJObjectLoader.hpp ]
  - symbol: ArtGalleryOfCats::Gameplay::LevelFactory
    headers: [ ArtGalleryOfCats/Gameplay/LevelFactory.hpp ]


