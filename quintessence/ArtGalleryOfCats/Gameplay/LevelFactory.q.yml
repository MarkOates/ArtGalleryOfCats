properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: model_bin
    type: AllegroFlare::ModelBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: entity_pool
    type: AllegroFlare::SceneGraph::EntityPool*
    init_with: '{}'
    constructor_arg: true
    getter: true
    setter: true

  - name: riddle
    type: ArtGalleryOfCats::Gameplay::Riddle*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: level
    type: ArtGalleryOfCats::Gameplay::Level*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: resources_path
    type: std::string
    init_with: DEFAULT_RESOURCES_PATH
    constructor_arg: true
    getter: true
    setter: true

  - name: DEFAULT_RESOURCES_PATH
    type: char*
    init_with: '(char*)"[unset-resources_path]"'
    static: true
    constexpr: true


functions:


  - name: has_non_default_resources_path
    type: bool
    body: |
      return (resources_path != DEFAULT_RESOURCES_PATH);


  - name: object_parsed_callback
    static: true
    type: void
    parameters:
      - name: name_property
        type: std::string
        default_argument: '"[unset-name_property]"'
      - name: class_property
        type: std::string
        default_argument: '"[unset-class_property]"'
      - name: x_property
        type: float
        default_argument: 0.0f
      - name: y_property
        type: float
        default_argument: 0.0f
      - name: width_property
        type: float
        default_argument: 0.0f
      - name: height_property
        type: float
        default_argument: 0.0f
      - name: custom_properties
        type: std::vector<std::pair<std::string, std::string>>
        default_argument: '{}'
      - name: user_data
        type: void*
        default_argument: nullptr
    guards: [ user_data ]
    body: |
      ArtGalleryOfCats::Gameplay::LevelFactory *this_factory =
         static_cast<ArtGalleryOfCats::Gameplay::LevelFactory*>(user_data);
      AllegroFlare::SceneGraph::EntityPool &entity_pool = *(this_factory->entity_pool);
      ArtGalleryOfCats::Gameplay::EntityFactory entity_factory;
      entity_factory.set_model_bin(this_factory->model_bin);
      entity_factory.set_bitmap_bin(this_factory->bitmap_bin);

      if (class_property == "sculpture")
      {
         AllegroFlare::Physics::AABB2D hit_box_2d(x_property, y_property, width_property, height_property);

         ArtGalleryOfCats::Gameplay::Entities::Base* art = entity_factory.create_sculpture_art(
            name_property, //"art-01",
            "art-02.obj",
            "art-01.png",
            { x_property + width_property * 0.5f, 0, y_property + height_property * 0.5f },
            0.0f,
            hit_box_2d,
            {}
         );
         entity_pool.add(art);
      }
      else if (class_property == "wall_art")
      {
         float rotation = 0.0f;
         float wall_art_scale = ArtGalleryOfCats::Gameplay::EntityFactory::DEFAULT_WALL_ART_SCALE;
         std::string image_identifier = "storyboard-2-01-1165x500.png";

         AllegroFlare::Physics::AABB2D hit_box_2d(x_property, y_property, width_property, height_property);

         // extract custom properties
         std::cout << "-- num_custom_properties: " << custom_properties.size() << std::endl;
         for (auto &custom_property : custom_properties)
         {
            std::cout << "  - first: " << custom_property.first << std::endl;
            std::cout << "    second: " << custom_property.second << std::endl;
            if (custom_property.first == "facing")
            {
               std::string facing_direction = custom_property.second;
               if (facing_direction == "down") rotation = 0.0f;
               else if (facing_direction == "right") rotation = 0.25f;
               else if (facing_direction == "left") rotation = -0.25f;
               else if (facing_direction == "up") rotation = 0.5f;
               else
               {
                  throw std::runtime_error("Gameplay::LevelFactory: unrecognized \"facing\" value.");
               }
            }
            if (custom_property.first == "image_identifier")
            {
               image_identifier = custom_property.second;
            }
         }

         std::cout << "   rotation: " << rotation << std::endl;

         ArtGalleryOfCats::Gameplay::Entities::Base* art = entity_factory.create_wall_art(
            name_property, //"art1",
            image_identifier,
            { x_property + width_property * 0.5f, 1.5, y_property + height_property * 0.5f },
            rotation,
            wall_art_scale,
            hit_box_2d,
            {}
         );
         entity_pool.add(art);
      }
      else
      {
         // TODO: Thrown on unknonw type
      }

      //if (custom_properties.size()
      
      // TODO: This function
      return;
    body_dependency_symbols:
      - ArtGalleryOfCats::Gameplay::LevelFactory


  - name: map_properties_parsed_callback
    static: true
    type: void
    parameters:
      - name: map_custom_properties
        type: std::vector<std::tuple<std::string, std::string, std::string>>
        default_argument: '{}'
      - name: user_data
        type: void*
        default_argument: nullptr
    guards: [ user_data ]
    body: |
      ArtGalleryOfCats::Gameplay::LevelFactory *this_factory =
         static_cast<ArtGalleryOfCats::Gameplay::LevelFactory*>(user_data);

      bool found_riddle_text = false;
      bool found_riddle_prompt_text = false;
      bool found_riddle_answer = false;

      for (auto &map_custom_property : map_custom_properties)
      {
         std::string property_name = std::get<0>(map_custom_property);
         std::string property_type = std::get<1>(map_custom_property);
         std::string property_value = std::get<2>(map_custom_property);

         if (property_name == "riddle_text")
         {
            // TODO: Validate not blank
            this_factory->riddle->set_riddle_text(property_value);
            found_riddle_text = true;
         }
         else if (property_name == "riddle_prompt_text")
         {
            // TODO: Validate not blank
            this_factory->riddle->set_riddle_prompt_text(property_value);
            found_riddle_prompt_text = true;
         }
         else if (property_name == "riddle_answer")
         {
            // TODO: Validate not blank
            this_factory->riddle->set_riddle_answer(property_value);
            found_riddle_answer = true;
         }
         else if (property_name == "music_identifier")
         {
            // TODO: Validate not blank
            // TODO: Pass in this value to the level
            this_factory->level->set_music_identifier(property_value);
         }
         else if (property_name == "name")
         {
            // TODO: Validate not blank
            // TODO: Pass in this value to the level
            this_factory->level->set_name(property_value);
         }
         else if (property_name == "gallery_title")
         {
            // TODO: Validate not blank
            // TODO: Pass in this value to the level
            this_factory->level->set_title(property_value);
         }
      }

      if (!found_riddle_text || !found_riddle_prompt_text || !found_riddle_answer)
      {
         // There was an error finding the riddle text properties
         AllegroFlare::Errors::throw_error(
            "ArtGalleryOfCats::Gameplay::LevelFactory::map_properties_parsed_callback",
            "when loading the map, one of \"riddle_text\", \"riddle_prompt_text\", and/or \"riddle_answer\" was "
               "not present."
         );
      }

      return;
    body_dependency_symbols:
      - ArtGalleryOfCats::Gameplay::LevelFactory
      - AllegroFlare::Errors


  - name: load_gallery_01
    guards: [ bitmap_bin, model_bin, entity_pool, riddle, level, has_non_default_resources_path() ]
    body: |
      // Set the level name
      //level->set_name("gallery_01");

      ArtGalleryOfCats::Gameplay::EntityFactory entity_factory;
      entity_factory.set_model_bin(model_bin);
      entity_factory.set_bitmap_bin(bitmap_bin);

      // Define our source TMJ filename
      std::string tmj_source_filename = resources_path + "/maps/gallery_01-14.tmj";

      // Create the environment visual mesh
      ArtGalleryOfCats::Gameplay::Entities::Base* environment_mesh = entity_factory.create_environment_mesh(
         "gallery_01-12.obj",
         "gallery_01-12.png"
      );
      entity_pool->add(environment_mesh);

      // Create the environment visual mesh
      ArtGalleryOfCats::Gameplay::Entities::CollisionTileMap* collision_tile_map =
         entity_factory.create_collision_tile_map(tmj_source_filename);
      collision_tile_map->set("collision_tile_map");
      entity_pool->add(collision_tile_map);

      // Create the camera, define it as the primary camera
      ArtGalleryOfCats::Gameplay::Entities::Camera3D* camera = entity_factory.create_camera();
      camera->set("primary_camera");
      entity_pool->add(camera);

      // Move our camera to the "spawn point"
      AllegroFlare::Vec2D spawn_point = { 14.5, 25 }; // TODO: Update this spawn point to pull from map
      camera->get_placement_ref().position.x = spawn_point.x;
      camera->get_placement_ref().position.z = spawn_point.y;

      // Create a collectable
      ArtGalleryOfCats::Gameplay::Entities::Base* collectable_object = entity_factory.create_collectable_object(
         AllegroFlare::Vec3D(24.0, 0.5, 17.0),
         "rounded_unit_cube-01.obj"
      );
      entity_pool->add(collectable_object);

      // Load objects from the TMJ file, as well as the riddle
      ArtGalleryOfCats::Gameplay::TMJObjectLoader tmj_object_loader(tmj_source_filename);
      tmj_object_loader.set_object_parsed_callback(object_parsed_callback);
      tmj_object_loader.set_object_parsed_callback_user_data(this);
      tmj_object_loader.set_map_properties_parsed_callback(map_properties_parsed_callback);
      tmj_object_loader.set_map_properties_parsed_callback_user_data(this);
      tmj_object_loader.load();

      // Validate name
      std::string expected_name = "gallery_01";
      std::string actual_name = level->get_name();
      if (expected_name != actual_name)
      {
         throw std::runtime_error(
            "ArtGalleryOfCats::Gameplay::LevelFactory names do not match \""
            + expected_name + "\" != \"" + actual_name + "\""
         );
      }

      return;
    body_dependency_symbols:
      - ArtGalleryOfCats::Gameplay::EntityFactory
      - ArtGalleryOfCats::Gameplay::EntityFlags
      - ArtGalleryOfCats::Gameplay::TMJObjectLoader


  - name: load_gallery_02
    guards: [ bitmap_bin, model_bin, entity_pool, riddle, level, has_non_default_resources_path() ]
    body: |
      ArtGalleryOfCats::Gameplay::EntityFactory entity_factory;
      entity_factory.set_model_bin(model_bin);
      entity_factory.set_bitmap_bin(bitmap_bin);

      // Set the level name
      //level->set_name("gallery_02");

      // Define our source TMJ filename
      std::string tmj_source_filename = resources_path + "/maps/gallery_02-08.tmj";

      // Create the environment visual mesh
      ArtGalleryOfCats::Gameplay::Entities::Base* environment_mesh = entity_factory.create_environment_mesh(
         "gallery_02-03.obj",
         "gallery_02-03.png"
      );
      entity_pool->add(environment_mesh);

      // Create the environment visual mesh
      ArtGalleryOfCats::Gameplay::Entities::CollisionTileMap* collision_tile_map =
         entity_factory.create_collision_tile_map(tmj_source_filename);
      collision_tile_map->set("collision_tile_map");
      entity_pool->add(collision_tile_map);

      // Create the camera, define it as the primary camera
      ArtGalleryOfCats::Gameplay::Entities::Camera3D* camera = entity_factory.create_camera();
      camera->set("primary_camera");
      entity_pool->add(camera);

      // Move our camera to the "spawn point"
      AllegroFlare::Vec2D spawn_point = { 14.5, 25 }; // TODO: Update this spawn point to pull from map
      camera->get_placement_ref().position.x = spawn_point.x;
      camera->get_placement_ref().position.z = spawn_point.y;

      // Load objects from the TMJ file, as well as the riddle
      ArtGalleryOfCats::Gameplay::TMJObjectLoader tmj_object_loader(tmj_source_filename);
      tmj_object_loader.set_object_parsed_callback(object_parsed_callback);
      tmj_object_loader.set_object_parsed_callback_user_data(this);
      tmj_object_loader.set_map_properties_parsed_callback(map_properties_parsed_callback);
      tmj_object_loader.set_map_properties_parsed_callback_user_data(this);
      tmj_object_loader.load();

      // Validate name
      std::string expected_name = "gallery_02";
      std::string actual_name = level->get_name();
      if (expected_name != actual_name)
      {
         throw std::runtime_error(
            "ArtGalleryOfCats::Gameplay::LevelFactory names do not match \""
            + expected_name + "\" != \"" + actual_name + "\""
         );
      }

      return;
    body_dependency_symbols:
      - ArtGalleryOfCats::Gameplay::EntityFactory
      - ArtGalleryOfCats::Gameplay::EntityFlags
      - ArtGalleryOfCats::Gameplay::TMJObjectLoader


  - name: load_gallery_03
    guards: [ bitmap_bin, model_bin, entity_pool, riddle, level, has_non_default_resources_path() ]
    body: |
      ArtGalleryOfCats::Gameplay::EntityFactory entity_factory;
      entity_factory.set_model_bin(model_bin);
      entity_factory.set_bitmap_bin(bitmap_bin);

      // Set the level name
      //level->set_name("gallery_02");

      // Define our source TMJ filename
      std::string tmj_source_filename = resources_path + "/maps/gallery_03-02.tmj";

      // Create the environment visual mesh
      ArtGalleryOfCats::Gameplay::Entities::Base* environment_mesh = entity_factory.create_environment_mesh(
         "gallery_03-02.obj",
         "gallery_03-02.png"
      );
      entity_pool->add(environment_mesh);

      // Create the environment visual mesh
      ArtGalleryOfCats::Gameplay::Entities::CollisionTileMap* collision_tile_map =
         entity_factory.create_collision_tile_map(tmj_source_filename);
      collision_tile_map->set("collision_tile_map");
      entity_pool->add(collision_tile_map);

      // Create the camera, define it as the primary camera
      ArtGalleryOfCats::Gameplay::Entities::Camera3D* camera = entity_factory.create_camera();
      camera->set("primary_camera");
      entity_pool->add(camera);

      // Move our camera to the "spawn point"
      AllegroFlare::Vec2D spawn_point = { 14.5, 25 }; // TODO: Update this spawn point to pull from map
      camera->get_placement_ref().position.x = spawn_point.x;
      camera->get_placement_ref().position.z = spawn_point.y;

      // Load objects from the TMJ file, as well as the riddle
      ArtGalleryOfCats::Gameplay::TMJObjectLoader tmj_object_loader(tmj_source_filename);
      tmj_object_loader.set_object_parsed_callback(object_parsed_callback);
      tmj_object_loader.set_object_parsed_callback_user_data(this);
      tmj_object_loader.set_map_properties_parsed_callback(map_properties_parsed_callback);
      tmj_object_loader.set_map_properties_parsed_callback_user_data(this);
      tmj_object_loader.load();

      // Validate name
      std::string expected_name = "gallery_03";
      std::string actual_name = level->get_name();
      if (expected_name != actual_name)
      {
         throw std::runtime_error(
            "ArtGalleryOfCats::Gameplay::LevelFactory names do not match \""
            + expected_name + "\" != \"" + actual_name + "\""
         );
      }

      return;
    body_dependency_symbols:
      - ArtGalleryOfCats::Gameplay::EntityFactory
      - ArtGalleryOfCats::Gameplay::EntityFlags
      - ArtGalleryOfCats::Gameplay::TMJObjectLoader


  - name: load_primary_map
    guards: [ bitmap_bin, model_bin, entity_pool, riddle, has_non_default_resources_path() ]
    body: |
      throw std::runtime_error("LevelFactory::load_primary_map - this gallery is obsolete");

      ArtGalleryOfCats::Gameplay::EntityFactory entity_factory;
      entity_factory.set_model_bin(model_bin);
      entity_factory.set_bitmap_bin(bitmap_bin);

      // Define our source TMJ filename
      std::string tmj_source_filename = resources_path + "/maps/gallery-map-11.tmj";

      // Create the environment visual mesh
      ArtGalleryOfCats::Gameplay::Entities::Base* environment_mesh = entity_factory.create_environment_mesh(
         "gallery-map-05.obj",
         "gallery-map-05.png"
      );
      entity_pool->add(environment_mesh);

      // Create the environment visual mesh
      ArtGalleryOfCats::Gameplay::Entities::CollisionTileMap* collision_tile_map =
         entity_factory.create_collision_tile_map(tmj_source_filename);
      collision_tile_map->set("collision_tile_map");
      entity_pool->add(collision_tile_map);

      // Create the camera, define it as the primary camera
      ArtGalleryOfCats::Gameplay::Entities::Camera3D* camera = entity_factory.create_camera();
      camera->set("primary_camera");
      entity_pool->add(camera);

      // Move our camera to the "spawn point"
      AllegroFlare::Vec2D spawn_point = { 14.5, 25 }; // TODO: Update this spawn point to pull from map
      camera->get_placement_ref().position.x = spawn_point.x;
      camera->get_placement_ref().position.z = spawn_point.y;

      // Create a collectable
      ArtGalleryOfCats::Gameplay::Entities::Base* collectable_object = entity_factory.create_collectable_object(
         AllegroFlare::Vec3D(24.0, 0.5, 17.0),
         "rounded_unit_cube-01.obj"
      );
      entity_pool->add(collectable_object);

      // Load objects from the TMJ file, as well as the riddle
      ArtGalleryOfCats::Gameplay::TMJObjectLoader tmj_object_loader(tmj_source_filename);
      tmj_object_loader.set_object_parsed_callback(object_parsed_callback);
      tmj_object_loader.set_object_parsed_callback_user_data(this);
      tmj_object_loader.set_map_properties_parsed_callback(map_properties_parsed_callback);
      tmj_object_loader.set_map_properties_parsed_callback_user_data(this);
      tmj_object_loader.load();

      return;
    body_dependency_symbols:
      - ArtGalleryOfCats::Gameplay::EntityFactory
      - ArtGalleryOfCats::Gameplay::EntityFlags
      - ArtGalleryOfCats::Gameplay::TMJObjectLoader


dependencies:


  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]
  - symbol: ArtGalleryOfCats::Gameplay::EntityFactory
    headers: [ ArtGalleryOfCats/Gameplay/EntityFactory.hpp ]
  - symbol: AllegroFlare::SceneGraph::EntityPool
    headers: [ AllegroFlare/SceneGraph/EntityPool.hpp ]
  - symbol: ArtGalleryOfCats::Gameplay::EntityFlags
    headers: [ ArtGalleryOfCats/Gameplay/EntityFlags.hpp ]
  - symbol: ArtGalleryOfCats::Gameplay::TMJObjectLoader
    headers: [ ArtGalleryOfCats/Gameplay/TMJObjectLoader.hpp ]
  - symbol: ArtGalleryOfCats::Gameplay::LevelFactory
    headers: [ ArtGalleryOfCats/Gameplay/LevelFactory.hpp ]
  - symbol: ArtGalleryOfCats::Gameplay::Riddle
    headers: [ ArtGalleryOfCats/Gameplay/Riddle.hpp ]
  - symbol: AllegroFlare::Errors
    headers: [ AllegroFlare/Errors.hpp ]
  - symbol: ArtGalleryOfCats::Gameplay::Level
    headers: [ ArtGalleryOfCats/Gameplay/Level.hpp ]


