parent_classes:


  - class: AllegroFlare::Screens::Base
    scope: public
    init_with: ArtGalleryOfCats::Gameplay::Screen::TYPE


properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true

  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: model_bin
    type: AllegroFlare::ModelBin*
    init_with: nullptr
    constructor_arg: true

  - name: entity_pool
    type: AllegroFlare::SceneGraph::EntityPool
    init_with: '{}'
    constructor_arg: true

  - name: current_level_identifier
    type: std::string
    init_with: '"[unset-current_level]"'

  - name: current_level
    type: void*
    init_with: nullptr

  - name: on_finished_callback_func
    type: std::function<void(ArtGalleryOfCats::Gameplay::Screen*, void*)>
    init_with: ''
    getter: true
    setter: true

  - name: on_finished_callback_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: initialized
    type: bool
    init_with: false

  - name: TYPE
    type: char*
    init_with: '(char*)"ArtGalleryOfCats/Gameplay/Screen"'
    static: true
    constexpr: true


functions:


  - name: set_event_emitter
    guards: [ (!initialized) ]
    parameters:
      - name: event_emitter
        type: AllegroFlare::EventEmitter*
        default_argument: nullptr
    body: |
      this->event_emitter = event_emitter;
      return;


  - name: set_bitmap_bin
    guards: [ (!initialized) ]
    parameters:
      - name: bitmap_bin
        type: AllegroFlare::BitmapBin*
        default_argument: nullptr
    body: |
      this->bitmap_bin = bitmap_bin;
      return;


  - name: set_font_bin
    guards: [ (!initialized) ]
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
    body: |
      this->font_bin = font_bin;
      return;


  - name: set_model_bin
    guards: [ (!initialized) ]
    parameters:
      - name: model_bin
        type: AllegroFlare::ModelBin*
        default_argument: nullptr
    body: |
      this->model_bin = model_bin;
      return;
      return;


  - name: load_level_by_identifier
    parameters:
      - name: level_identifier
        type: std::string
        default_argument: '"[unset-level_identifier]"'
    body: |
      current_level_identifier = level_identifier;
      if (current_level) delete (int*)(current_level);
      current_level = (void*)(new int(3));

      load_level(); // TODO: replace this with name of level
      return;


  - name: load_level
    private: true
    body: |
      ArtGalleryOfCats::Gameplay::EntityFactory entity_factory;
      entity_factory.set_model_bin(model_bin);
      entity_factory.set_bitmap_bin(bitmap_bin);

      // Create the environment visual mesh
      ArtGalleryOfCats::Gameplay::Entities::Base* environment_mesh = entity_factory.create_environment_mesh();
      entity_pool.add(environment_mesh);

      // Create the environment visual mesh
      ArtGalleryOfCats::Gameplay::Entities::CollisionTileMap* collision_tile_map =
         entity_factory.create_collision_tile_map();
      collision_tile_map->set("collision_tile_map");
      entity_pool.add(collision_tile_map);

      // Create the camera, define it as the primary camera
      ArtGalleryOfCats::Gameplay::Entities::Camera3D* camera = entity_factory.create_camera();
      camera->set("primary_camera");
      entity_pool.add(camera);

      // Move our camera to the "spawn point"
      AllegroFlare::Vec2D spawn_point = { 11, 18 }; // TODO: Update this spawn point to pull from map
      camera->get_placement_ref().position.x = spawn_point.x;
      camera->get_placement_ref().position.z = spawn_point.y;

      return;
    body_dependency_symbols:
      - ArtGalleryOfCats::Gameplay::EntityFactory


  - name: initialize
    guards:
      - (!initialized)
      - al_is_system_installed()
      - al_is_primitives_addon_initialized()
      - al_is_font_addon_initialized()
      - event_emitter
      - bitmap_bin
      - font_bin
      - model_bin
    body: |
      initialized = true;
      return;
    body_dependency_symbols:
      - al_is_primitives_addon_initialized


  - name: on_activate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      //emit_event_to_update_input_hints_bar();
      //emit_show_and_size_input_hints_bar_event();
      return;


  - name: on_deactivate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      //emit_hide_and_restore_size_input_hints_bar_event();
      return;


  - name: update
    body: |
      scene_physics_updater();
      return;


  - name: scene_physics_updater
    private: true
    body: |
      AllegroFlare::SceneGraph::Entities::Base *entity = nullptr;

      // Extract out the collision map
      entity = entity_pool.find_with_attribute("collision_tile_map");
      if (!entity) throw std::runtime_error("no collision_tile_map present");
      ArtGalleryOfCats::Gameplay::Entities::CollisionTileMap *as_collision_tile_map=
         static_cast<ArtGalleryOfCats::Gameplay::Entities::CollisionTileMap*>(entity);

      // Create our collision stepper
      AllegroFlare::Physics::TileMapCollisionStepper collision_stepper;
      collision_stepper.set_collision_tile_map(&as_collision_tile_map->get_collision_tile_map_ref());

      float box_h_size = 0.5;
      for (auto &entity : entity_pool.get_entity_pool_ref())
      {
         ArtGalleryOfCats::Gameplay::Entities::Base *as_agc_entity =
            static_cast<ArtGalleryOfCats::Gameplay::Entities::Base*>(entity);
         AllegroFlare::Placement3D &placement = as_agc_entity->get_placement_ref();
         AllegroFlare::Placement3D &velocity = as_agc_entity->get_velocity_ref();

         AllegroFlare::Physics::AABB2D aabb2d(
            placement.position.x,
            placement.position.y,
            1.0, // Our object will be a 1x1 square
            1.0
         );

         collision_stepper.set_aabb2d(&aabb2d);

         std::vector<AllegroFlare::Physics::TileMapCollisionStepperCollisionInfo> stepper_step_result =
            collision_stepper.step();

         //placement.position += velocity.position;
         //placement.rotation += velocity.rotation;
      }

      // HACK: Extract out the camera and assign it's position
      // TODO: Create a separate entity, then assign the camera values to the live camera (or something)
      entity = entity_pool.find_with_attribute("primary_camera");
      if (!entity) throw std::runtime_error("no camera present");
      ArtGalleryOfCats::Gameplay::Entities::Camera3D *as_camera =
         static_cast<ArtGalleryOfCats::Gameplay::Entities::Camera3D*>(entity);
      as_camera->AllegroFlare::Camera3D::position = as_camera->get_placement_ref().position;

      return;
    body_dependency_symbols:
      - AllegroFlare::Physics::TileMapCollisionStepper


  - name: render
    body: |
      scene_renderer_render();
      return;


  - name: scene_renderer_render
    private: true
    body: |
      // Extract out the camera and render the scene
      AllegroFlare::SceneGraph::Entities::Base *entity = entity_pool.find_with_attribute("primary_camera");
      if (!entity) throw std::runtime_error("no camera present");
      ArtGalleryOfCats::Gameplay::Entities::Camera3D *as_camera =
         static_cast<ArtGalleryOfCats::Gameplay::Entities::Camera3D*>(entity);

      ALLEGRO_BITMAP *render_surface = al_get_backbuffer(al_get_current_display()); // TODO: replace with render surface
      al_clear_depth_buffer(1);
      al_clear_to_color(ALLEGRO_COLOR{0.1, 0.105, 0.12, 1.0});

      as_camera->setup_projection_on(render_surface);

      // TODO: validate the camera is of type Entities::Camera
      // TODO: here

      //std::unordered_set<AllegroFlare::SceneGraph::Entities::Base*>
      for (auto &entity : entity_pool.get_entity_pool_ref())
      {
         ArtGalleryOfCats::Gameplay::Entities::Base *as_agc_entity =
            static_cast<ArtGalleryOfCats::Gameplay::Entities::Base*>(entity);

         AllegroFlare::Model3D *model = as_agc_entity->get_model();
         if (model)
         {
            ALLEGRO_BITMAP *texture = as_agc_entity->get_texture();
            if (texture) model->set_texture(texture);
            model->draw();
         }
      }

      //as_camera->start_reverse_transform();
      return;
    body_dependency_symbols:
      - ArtGalleryOfCats::Gameplay::Entities::Base
      - ArtGalleryOfCats::Gameplay::Entities::Camera3D


  - name: call_on_finished_callback_func
    body: |
      // TODO: Test this callback call
      if (on_finished_callback_func) on_finished_callback_func(this, on_finished_callback_func_user_data);


  - name: primary_timer_func
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      update();
      render();
      return;


  - name: player_spin_change
    parameters:
      - name: delta
        type: float
        default_argument: 0.0f
    body: |
      AllegroFlare::SceneGraph::Entities::Base *entity = entity_pool.find_with_attribute("primary_camera");
            if (!entity) throw std::runtime_error("virtual_controls: no camera present");
            ArtGalleryOfCats::Gameplay::Entities::Camera3D *as_camera =
            static_cast<ArtGalleryOfCats::Gameplay::Entities::Camera3D*>(entity);

            as_camera->spin += delta;
      return;


  - name: player_stop_moving
    body: |
      AllegroFlare::SceneGraph::Entities::Base *entity = entity_pool.find_with_attribute("primary_camera");
            if (!entity) throw std::runtime_error("virtual_controls: no camera present");
            ArtGalleryOfCats::Gameplay::Entities::Camera3D *as_camera =
            static_cast<ArtGalleryOfCats::Gameplay::Entities::Camera3D*>(entity);

            as_camera->get_velocity_ref().position.x = 0.0;
            as_camera->get_velocity_ref().position.z = 0.0;
      return;


  - name: player_strafe_right
    body: |
      AllegroFlare::SceneGraph::Entities::Base *entity = entity_pool.find_with_attribute("primary_camera");
            if (!entity) throw std::runtime_error("virtual_controls: no camera present");
            ArtGalleryOfCats::Gameplay::Entities::Camera3D *as_camera =
            static_cast<ArtGalleryOfCats::Gameplay::Entities::Camera3D*>(entity);

            as_camera->get_velocity_ref().position.x = 0.1;
      return;


  - name: player_strafe_left
    body: |
      AllegroFlare::SceneGraph::Entities::Base *entity = entity_pool.find_with_attribute("primary_camera");
            if (!entity) throw std::runtime_error("virtual_controls: no camera present");
            ArtGalleryOfCats::Gameplay::Entities::Camera3D *as_camera =
            static_cast<ArtGalleryOfCats::Gameplay::Entities::Camera3D*>(entity);

            as_camera->get_velocity_ref().position.x = -0.1;
      return;


  - name: player_move_forward
    body: |
      AllegroFlare::SceneGraph::Entities::Base *entity = entity_pool.find_with_attribute("primary_camera");
            if (!entity) throw std::runtime_error("virtual_controls: no camera present");
            ArtGalleryOfCats::Gameplay::Entities::Camera3D *as_camera =
            static_cast<ArtGalleryOfCats::Gameplay::Entities::Camera3D*>(entity);

            as_camera->get_velocity_ref().position.z = -0.1;
      return;


  - name: player_move_backward
    body: |
      AllegroFlare::SceneGraph::Entities::Base *entity = entity_pool.find_with_attribute("primary_camera");
            if (!entity) throw std::runtime_error("virtual_controls: no camera present");
            ArtGalleryOfCats::Gameplay::Entities::Camera3D *as_camera =
            static_cast<ArtGalleryOfCats::Gameplay::Entities::Camera3D*>(entity);

            as_camera->get_velocity_ref().position.z = 0.1;
      return;


  - name: virtual_control_button_up_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      player_stop_moving(); // TODO: Improve this movement
      return;


  - name: virtual_control_button_down_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      // TODO: validate virtual controller type

      switch(virtual_controller_button_num)
      {
         case AllegroFlare::VirtualControllers::GenericController::BUTTON_LEFT: {
            player_strafe_left();
         } break;

         case AllegroFlare::VirtualControllers::GenericController::BUTTON_RIGHT: {
            player_strafe_right();
         } break;

         case AllegroFlare::VirtualControllers::GenericController::BUTTON_UP: {
            player_move_forward();
         } break;

         case AllegroFlare::VirtualControllers::GenericController::BUTTON_DOWN: {
            player_move_backward();
         } break;

         default: {
            // TODO: IMPORTANT: There is currently no escape from gameplay/screen
            //call_on_finished_callback_func();
         } break;
      };

      return;
    body_dependency_symbols:
      - AllegroFlare::VirtualControllers::GenericController


  - name: virtual_control_axis_change_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      //if (ev->mouse
      //result->tilt = 0.13;            // look up(-)/down(+)
      //result->spin = 0.2;             // set a good start initial spin
      // TODO: this function
      return;


  - name: mouse_axes_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      // TODO: Validate spin change
      float spin_delta = ev->mouse.dx;
      float spin_multiplier = 0.001;
      player_spin_change(spin_delta * spin_multiplier);
      //float x_delta = ev->mouse->dx;
      //result->tilt = 0.13;            // look up(-)/down(+)
      //result->spin = 0.2;             // set a good start initial spin
      // TODO: this function
      return;


dependencies:


  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Player
    headers: [ AllegroFlare/Player.hpp ]
  - symbol: AllegroFlare::VirtualControllers::Base
    headers: [ AllegroFlare/VirtualControllers/Base.hpp ]
  - symbol: ArtGalleryOfCats::Gameplay::Screen
    headers: [ ArtGalleryOfCats/Gameplay/Screen.hpp ]
  - symbol: AllegroFlare::SceneGraph::EntityPool
    headers: [ AllegroFlare/SceneGraph/EntityPool.hpp ]
  - symbol: ArtGalleryOfCats::Gameplay::EntityFactory
    headers: [ ArtGalleryOfCats/Gameplay/EntityFactory.hpp ]
  - symbol: ArtGalleryOfCats::Gameplay::Entities::Base
    headers: [ ArtGalleryOfCats/Gameplay/Entities/Base.hpp ]
  - symbol: ArtGalleryOfCats::Gameplay::Entities::Camera3D
    headers: [ ArtGalleryOfCats/Gameplay/Entities/Camera3D.hpp ]
  - symbol: AllegroFlare::VirtualControllers::GenericController
    headers: [ AllegroFlare/VirtualControllers/GenericController.hpp ]
  - symbol: AllegroFlare::Physics::TileMapCollisionStepper
    headers: [ AllegroFlare/Physics/TileMapCollisionStepper.hpp ]


