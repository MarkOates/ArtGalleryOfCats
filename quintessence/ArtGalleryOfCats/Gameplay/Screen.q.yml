parent_classes:


  - class: AllegroFlare::Screens::Base
    scope: public
    init_with: ArtGalleryOfCats::Gameplay::Screen::TYPE


properties:


  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true

  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: model_bin
    type: AllegroFlare::ModelBin*
    init_with: nullptr
    constructor_arg: true

  - name: entity_pool
    type: AllegroFlare::SceneGraph::EntityPool
    init_with: '{}'
    constructor_arg: true

  - name: current_level_identifier
    type: std::string
    init_with: '"[unset-current_level]"'

  - name: current_level
    type: void*
    init_with: nullptr

  - name: on_finished_callback_func
    type: std::function<void(ArtGalleryOfCats::Gameplay::Screen*, void*)>
    init_with: ''
    getter: true
    setter: true

  - name: on_finished_callback_func_user_data
    type: void*
    init_with: nullptr
    getter: true
    setter: true

  - name: cubemap_shader
    type: AllegroFlare::Shaders::Cubemap
    init_with: '{}'

  - name: cube_map_texture
    type: AllegroFlare::Cubemap*
    init_with: nullptr

  - name: initialized
    type: bool
    init_with: false

  - name: TYPE
    type: char*
    init_with: '(char*)"ArtGalleryOfCats/Gameplay/Screen"'
    static: true
    constexpr: true


functions:


  - name: set_event_emitter
    guards: [ (!initialized) ]
    parameters:
      - name: event_emitter
        type: AllegroFlare::EventEmitter*
        default_argument: nullptr
    body: |
      this->event_emitter = event_emitter;
      return;


  - name: set_bitmap_bin
    guards: [ (!initialized) ]
    parameters:
      - name: bitmap_bin
        type: AllegroFlare::BitmapBin*
        default_argument: nullptr
    body: |
      this->bitmap_bin = bitmap_bin;
      return;


  - name: set_font_bin
    guards: [ (!initialized) ]
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
    body: |
      this->font_bin = font_bin;
      return;


  - name: set_model_bin
    guards: [ (!initialized) ]
    parameters:
      - name: model_bin
        type: AllegroFlare::ModelBin*
        default_argument: nullptr
    body: |
      this->model_bin = model_bin;
      return;
      return;


  - name: load_level_by_identifier
    parameters:
      - name: level_identifier
        type: std::string
        default_argument: '"[unset-level_identifier]"'
    body: |
      current_level_identifier = level_identifier;
      if (current_level) delete (int*)(current_level);
      current_level = (void*)(new int(3));

      load_level(); // TODO: replace this with name of level
      return;


  - name: load_level
    private: true
    body: |
      ArtGalleryOfCats::Gameplay::LevelFactory level_factory;
      level_factory.set_model_bin(model_bin);
      level_factory.set_bitmap_bin(bitmap_bin);
      level_factory.set_entity_pool(&entity_pool);

      level_factory.load_primary_map();

      return;
    body_dependency_symbols:
      - ArtGalleryOfCats::Gameplay::LevelFactory


  - name: initialize
    guards:
      - (!initialized)
      - al_is_system_installed()
      - al_is_primitives_addon_initialized()
      - al_is_font_addon_initialized()
      - event_emitter
      - bitmap_bin
      - font_bin
      - model_bin
    body: |
      cubemap_shader.initialize();

      // TODO: Fix this section
      AllegroFlare::CubemapBuilder builder;
      std::string cube_map_texture_filename = "fixtures/bitmaps/black_prism_1-01.png"; // TODO: set the correct location
      AllegroFlare::Cubemap *cube_map =
         builder.glsl_create_cubemap_from_vertical_strip(cube_map_texture_filename.c_str());

      initialized = true;
      return;
    body_dependency_symbols:
      - al_is_primitives_addon_initialized
      - AllegroFlare::CubemapBuilder


  - name: on_activate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      //emit_event_to_update_input_hints_bar();
      //emit_show_and_size_input_hints_bar_event();
      return;


  - name: on_deactivate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      //emit_hide_and_restore_size_input_hints_bar_event();
      return;


  - name: update
    body: |
      scene_physics_updater();
      return;


  - name: scene_physics_updater
    private: true
    body: |
      AllegroFlare::SceneGraph::Entities::Base *entity = nullptr;

      // Extract out the collision map
      entity = entity_pool.find_with_attribute("collision_tile_map");
      if (!entity) throw std::runtime_error("no collision_tile_map present");
      ArtGalleryOfCats::Gameplay::Entities::CollisionTileMap *as_collision_tile_map =
         static_cast<ArtGalleryOfCats::Gameplay::Entities::CollisionTileMap*>(entity);

      // Create our collision stepper
      AllegroFlare::Physics::TileMapCollisionStepper collision_stepper;
      collision_stepper.set_collision_tile_map(&as_collision_tile_map->get_collision_tile_map_ref());
      collision_stepper.set_tile_width(1);
      collision_stepper.set_tile_height(1);

      float box_size = 2.0;
      float box_h_size = box_size * 0.5f;
      for (auto &entity : entity_pool.get_entity_pool_ref())
      {
         ArtGalleryOfCats::Gameplay::Entities::Base *as_agc_entity =
            static_cast<ArtGalleryOfCats::Gameplay::Entities::Base*>(entity);
         AllegroFlare::Placement3D &placement = as_agc_entity->get_placement_ref();
         AllegroFlare::Placement3D &velocity = as_agc_entity->get_velocity_ref();

         AllegroFlare::Physics::AABB2D aabb2d(
            placement.position.x - box_h_size,
            placement.position.z - box_h_size,
            box_size, // Each object will have the size of the "box_size"
            box_size,
            velocity.position.x,
            velocity.position.z
         );

         collision_stepper.set_aabb2d(&aabb2d);

         std::vector<AllegroFlare::Physics::TileMapCollisionStepperCollisionInfo> stepper_step_result =
            collision_stepper.step();

         placement.position = AllegroFlare::Vec3D(aabb2d.get_x() + box_h_size, 0.0f, aabb2d.get_y() + box_h_size);
         velocity.position = { aabb2d.get_velocity_x(), 0.0f, aabb2d.get_velocity_y() };
         placement.rotation += velocity.rotation;
      }

      // HACK: Extract out the camera and assign it's position
      // TODO: Create a separate entity, then assign the camera values to the live camera (or something)
      entity = entity_pool.find_with_attribute("primary_camera");
      if (!entity) throw std::runtime_error("no camera present");
      ArtGalleryOfCats::Gameplay::Entities::Camera3D *as_camera =
         static_cast<ArtGalleryOfCats::Gameplay::Entities::Camera3D*>(entity);
      as_camera->AllegroFlare::Camera3D::position = as_camera->get_placement_ref().position;

      return;
    body_dependency_symbols:
      - ArtGalleryOfCats::Gameplay::Entities::Camera3D
      - AllegroFlare::Camera3D
      - AllegroFlare::Physics::TileMapCollisionStepper
      - ArtGalleryOfCats::Gameplay::Entities::CollisionTileMap


  - name: render
    body: |
      scene_renderer_render();
      render_hud();
      return;


  - name: scene_renderer_render
    private: true
    body: |
      ArtGalleryOfCats::Gameplay::SceneRenderer scene_renderer;
      scene_renderer.set_entity_pool(&entity_pool);
      scene_renderer.set_cubemap_shader(&cubemap_shader);
      scene_renderer.render();
      return;
    body_dependency_symbols:
      - ArtGalleryOfCats::Gameplay::SceneRenderer


  - name: render_hud
    private: true
    body: |
      // Local vars;
      AllegroFlare::SceneGraph::Entities::Base *entity = nullptr;

      AllegroFlare::Camera2D hud_camera;
      ALLEGRO_BITMAP *render_surface = al_get_backbuffer(al_get_current_display()); // TODO: replace with render surface
      hud_camera.setup_dimentional_projection(render_surface);

      hud_camera.position.x = -800;
      hud_camera.position.y = -400;

      hud_camera.start_reverse_transform();
      //hud_camera.start_transform();

      //ALLEGRO_FONT *font = al_create_builtin_font();
      //al_draw_text(font, ALLEGRO_COLOR{1, 1, 1, 1}, 10, 10, ALLEGRO_ALIGN_LEFT, ".ul");
      //al_draw_text(font, ALLEGRO_COLOR{1, 1, 1, 1}, 1920-10, 1080-10, ALLEGRO_ALIGN_RIGHT, "br.");


      // Extract out the collision map
      entity = entity_pool.find_with_attribute("collision_tile_map");
      if (!entity) throw std::runtime_error("no collision_tile_map present");
      ArtGalleryOfCats::Gameplay::Entities::CollisionTileMap *as_collision_tile_map=
         static_cast<ArtGalleryOfCats::Gameplay::Entities::CollisionTileMap*>(entity);
      AllegroFlare::TileMaps::TileMap<int> &collision_tile_map= as_collision_tile_map->get_collision_tile_map_ref();



      render_tile_map(&collision_tile_map, 16.0f, 16.0f);


      for (auto &entity : entity_pool.get_entity_pool_ref())
      {
         ArtGalleryOfCats::Gameplay::Entities::Base *as_agc_entity =
            static_cast<ArtGalleryOfCats::Gameplay::Entities::Base*>(entity);
         AllegroFlare::Placement3D &placement = as_agc_entity->get_placement_ref();
         //AllegroFlare::Placement3D &velocity = as_agc_entity->get_velocity_ref();

         AllegroFlare::Physics::AABB2D aabb2d(
            placement.position.x * 16 - (16 * 0.5),
            placement.position.z * 16 - (16 * 0.5),
            16.0, // Our object will be a 1x1 square
            16.0
            //velocity.position.x,
            //velocity.position.z
         );

         render_aabb2d(
                  &aabb2d
               );

         al_draw_filled_circle(placement.position.x * 16, placement.position.z * 16, 8, ALLEGRO_COLOR{0, 1, 0.8, 1.0});
      }

      
      hud_camera.restore_transform();

      //render_tile_map(&collision_tile_map, 16.0f, 16.0f);
      //render_aabb2d(
                  //aabb2d,
                  //aabb2d_adjacent_to_top_edge,
                  //aabb2d_adjacent_to_right_edge,
                  //aabb2d_adjacent_to_bottom_edge,
                  //aabb2d_adjacent_to_left_edge
               //);


      //hud_camera.restore_transform();

      /*
      AllegroFlare::Placement2D camera;
      camera.scale.x = 4.8;
      camera.scale.y = 4.5;


      camera.start_transform();
      render_tile_map(collision_tile_map, 16.0f, 16.0f);
      camera.restore_transform();
      */

       /*
            { // draw
               //al_clear_to_color(ALLEGRO_COLOR{0, 0, 0, 0});
               camera.start_transform();
               render_tile_map(collision_tile_map, 16.0f, 16.0f);
               render_aabb2d(
                  aabb2d,
                  aabb2d_adjacent_to_top_edge,
                  aabb2d_adjacent_to_right_edge,
                  aabb2d_adjacent_to_bottom_edge,
                  aabb2d_adjacent_to_left_edge
               );
               camera.restore_transform();
               al_flip_display();
      */


   
      return;
    body_dependency_symbols:
      - AllegroFlare::Camera2D


  - name: render_tile_map
    parameters:
      - name: tile_map
        type: AllegroFlare::TileMaps::TileMap<int>*
        default_argument: nullptr
      - name: tile_width
        type: float 
        default_argument: 16.0f 
      - name: tile_height
        type: float 
        default_argument: 16.0f 
    guards: [ tile_map ]
    body: |
      if (!al_is_primitives_addon_initialized()) throw std::runtime_error("render_tile_map: primitives must be init");

      for (int y=0; y<tile_map->get_num_rows(); y++)
      {
         for (int x=0; x<tile_map->get_num_columns(); x++)
         {
            int tile_type = tile_map->get_tile(x, y);
            switch(tile_type)
            {
               case 0:
                 //al_draw_rectangle(x * tile_width, y * tile_height, (x+1) * tile_width, (y+1) * tile_height, 
                    //ALLEGRO_COLOR{0.2, 0.2, 0.21, 0.21}, 1.0);
               break;

               case 1:
                 al_draw_filled_rectangle(x * tile_width, y * tile_height, (x+1) * tile_width, (y+1) * tile_height, 
                    ALLEGRO_COLOR{0.65, 0.62, 0.6, 1.0});
               break;

               default:
                 //al_draw_filled_rectangle(x * tile_width, y * tile_height, (x+1) * tile_width, (y+1) * tile_height, 
                    //ALLEGRO_COLOR{0.8, 0.32, 0.4, 1.0});
               break;
            }
         }
      }
      return;


  - name: render_aabb2d
    parameters:
      - name: aabb2d
        type: AllegroFlare::Physics::AABB2D*
        default_argument: nullptr
      - name: adjacent_to_top_edge
        type: bool 
        default_argument: false
      - name: adjacent_to_right_edge
        type: bool 
        default_argument: false
      - name: adjacent_to_bottom_edge
        type: bool 
        default_argument: false
      - name: adjacent_to_left_edge
        type: bool 
        default_argument: false
    guards: [ aabb2d ]
    body: |
      al_draw_filled_rectangle(aabb2d->get_x(), aabb2d->get_y(), aabb2d->get_right_edge(), aabb2d->get_bottom_edge(),
         ALLEGRO_COLOR{1.0, 1.0, 1.0, 1.0});

      ALLEGRO_COLOR orange = ALLEGRO_COLOR{1.0, 0.5, 0.0, 1.0};

      /*
      if (adjacent_to_bottom_edge)
      {
         al_draw_line(aabb2d->get_x(), aabb2d->get_bottom_edge(), aabb2d->get_right_edge(), aabb2d->get_bottom_edge(), orange, 2.0);
      }
      if (adjacent_to_top_edge)
      {
         al_draw_line(aabb2d.get_x(), aabb2d.get_y(), aabb2d.get_right_edge(), aabb2d.get_y(), orange, 2.0);
      }
      if (adjacent_to_left_edge)
      {
         al_draw_line(aabb2d.get_x(), aabb2d.get_y(), aabb2d.get_x(), aabb2d.get_bottom_edge(), orange, 2.0);
      }
      if (adjacent_to_right_edge)
      {
         al_draw_line(aabb2d.get_right_edge(), aabb2d.get_y(), aabb2d.get_right_edge(), aabb2d.get_bottom_edge(), orange, 2.0);
      }
      */
      return;


  - name: call_on_finished_callback_func
    body: |
      // TODO: Test this callback call
      if (on_finished_callback_func) on_finished_callback_func(this, on_finished_callback_func_user_data);


  - name: primary_timer_func
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      update();
      render();
      return;


  - name: player_spin_change
    parameters:
      - name: delta
        type: float
        default_argument: 0.0f
    body: |
      AllegroFlare::SceneGraph::Entities::Base *entity = entity_pool.find_with_attribute("primary_camera");
            if (!entity) throw std::runtime_error("virtual_controls: no camera present");
            ArtGalleryOfCats::Gameplay::Entities::Camera3D *as_camera =
            static_cast<ArtGalleryOfCats::Gameplay::Entities::Camera3D*>(entity);

            as_camera->spin += delta;
      return;


  - name: player_stop_moving
    body: |
      AllegroFlare::SceneGraph::Entities::Base *entity = entity_pool.find_with_attribute("primary_camera");
            if (!entity) throw std::runtime_error("virtual_controls: no camera present");
            ArtGalleryOfCats::Gameplay::Entities::Camera3D *as_camera =
            static_cast<ArtGalleryOfCats::Gameplay::Entities::Camera3D*>(entity);

            as_camera->get_velocity_ref().position.x = 0.0;
            as_camera->get_velocity_ref().position.z = 0.0;
      return;


  - name: player_strafe_right
    body: |
      AllegroFlare::SceneGraph::Entities::Base *entity = entity_pool.find_with_attribute("primary_camera");
            if (!entity) throw std::runtime_error("virtual_controls: no camera present");
            ArtGalleryOfCats::Gameplay::Entities::Camera3D *as_camera =
            static_cast<ArtGalleryOfCats::Gameplay::Entities::Camera3D*>(entity);

            as_camera->get_velocity_ref().position.x = 0.1;
      return;


  - name: player_strafe_left
    body: |
      AllegroFlare::SceneGraph::Entities::Base *entity = entity_pool.find_with_attribute("primary_camera");
            if (!entity) throw std::runtime_error("virtual_controls: no camera present");
            ArtGalleryOfCats::Gameplay::Entities::Camera3D *as_camera =
            static_cast<ArtGalleryOfCats::Gameplay::Entities::Camera3D*>(entity);

            as_camera->get_velocity_ref().position.x = -0.1;
      return;


  - name: player_move_forward
    body: |
      AllegroFlare::SceneGraph::Entities::Base *entity = entity_pool.find_with_attribute("primary_camera");
            if (!entity) throw std::runtime_error("virtual_controls: no camera present");
            ArtGalleryOfCats::Gameplay::Entities::Camera3D *as_camera =
            static_cast<ArtGalleryOfCats::Gameplay::Entities::Camera3D*>(entity);

            as_camera->get_velocity_ref().position.z = -0.1;
      return;


  - name: player_move_backward
    body: |
      AllegroFlare::SceneGraph::Entities::Base *entity = entity_pool.find_with_attribute("primary_camera");
            if (!entity) throw std::runtime_error("virtual_controls: no camera present");
            ArtGalleryOfCats::Gameplay::Entities::Camera3D *as_camera =
            static_cast<ArtGalleryOfCats::Gameplay::Entities::Camera3D*>(entity);

            as_camera->get_velocity_ref().position.z = 0.1;
      return;


  - name: virtual_control_button_up_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      player_stop_moving(); // TODO: Improve this movement
      return;


  - name: virtual_control_button_down_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      // TODO: validate virtual controller type

      switch(virtual_controller_button_num)
      {
         case AllegroFlare::VirtualControllers::GenericController::BUTTON_LEFT: {
            player_strafe_left();
         } break;

         case AllegroFlare::VirtualControllers::GenericController::BUTTON_RIGHT: {
            player_strafe_right();
         } break;

         case AllegroFlare::VirtualControllers::GenericController::BUTTON_UP: {
            player_move_forward();
         } break;

         case AllegroFlare::VirtualControllers::GenericController::BUTTON_DOWN: {
            player_move_backward();
         } break;

         default: {
            // TODO: IMPORTANT: There is currently no escape from gameplay/screen
            //call_on_finished_callback_func();
         } break;
      };

      return;
    body_dependency_symbols:
      - AllegroFlare::VirtualControllers::GenericController


  - name: virtual_control_axis_change_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      //if (ev->mouse
      //result->tilt = 0.13;            // look up(-)/down(+)
      //result->spin = 0.2;             // set a good start initial spin
      // TODO: this function
      return;


  - name: mouse_axes_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      // TODO: Validate spin change
      float spin_delta = ev->mouse.dx;
      float spin_multiplier = 0.001;
      player_spin_change(spin_delta * spin_multiplier);
      //float x_delta = ev->mouse->dx;
      //result->tilt = 0.13;            // look up(-)/down(+)
      //result->spin = 0.2;             // set a good start initial spin
      // TODO: this function
      return;


dependencies:


  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Player
    headers: [ AllegroFlare/Player.hpp ]
  - symbol: AllegroFlare::VirtualControllers::Base
    headers: [ AllegroFlare/VirtualControllers/Base.hpp ]
  - symbol: ArtGalleryOfCats::Gameplay::Screen
    headers: [ ArtGalleryOfCats/Gameplay/Screen.hpp ]
  - symbol: AllegroFlare::SceneGraph::EntityPool
    headers: [ AllegroFlare/SceneGraph/EntityPool.hpp ]
  - symbol: ArtGalleryOfCats::Gameplay::EntityFactory
    headers: [ ArtGalleryOfCats/Gameplay/EntityFactory.hpp ]
  - symbol: ArtGalleryOfCats::Gameplay::Entities::Base
    headers: [ ArtGalleryOfCats/Gameplay/Entities/Base.hpp ]
  - symbol: ArtGalleryOfCats::Gameplay::Entities::Camera3D
    headers: [ ArtGalleryOfCats/Gameplay/Entities/Camera3D.hpp ]
  - symbol: AllegroFlare::VirtualControllers::GenericController
    headers: [ AllegroFlare/VirtualControllers/GenericController.hpp ]
  - symbol: AllegroFlare::Physics::TileMapCollisionStepper
    headers: [ AllegroFlare/Physics/TileMapCollisionStepper.hpp ]
  - symbol: AllegroFlare::Camera2D
    headers: [ AllegroFlare/Camera2D.hpp ]
  - symbol: AllegroFlare::Camera3D
    headers: [ AllegroFlare/Camera3D.hpp ]
  - symbol: AllegroFlare::TileMaps::TileMap
    headers: [ AllegroFlare/TileMaps/TileMap.hpp ]
  - symbol: AllegroFlare::Physics::AABB2D
    headers: [ AllegroFlare/Physics/AABB2D.hpp ]
  - symbol: ArtGalleryOfCats::Gameplay::LevelFactory
    headers: [ ArtGalleryOfCats/Gameplay/LevelFactory.hpp ]
  - symbol: ArtGalleryOfCats::Gameplay::Entities::CollisionTileMap
    headers: [ ArtGalleryOfCats/Gameplay/Entities/CollisionTileMap.hpp ]
  - symbol: ArtGalleryOfCats::Gameplay::SceneRenderer
    headers: [ ArtGalleryOfCats/Gameplay/SceneRenderer.hpp ]
  - symbol: AllegroFlare::Shaders::Cubemap
    headers: [ AllegroFlare/Shaders/Cubemap.hpp ]
  - symbol: AllegroFlare::Cubemap
    headers: [ AllegroFlare/Cubemap.hpp ]
  - symbol: AllegroFlare::CubemapBuilder
    headers: [ AllegroFlare/CubemapBuilder.hpp ]


