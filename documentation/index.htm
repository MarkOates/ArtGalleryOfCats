<!DOCTYPE html>
<head>
<style>
html
{
  background-color: #09090c;
  color: #dfdfdf;
}
*
{
  font-family: 'Arial';
  padding: 3px 20px;
}
table td
{
  padding: 3px 20px;
}
.property
{
  color: dodgerblue;
}
.private_property
{
  color: aliceblue;
}

.method
{
  color: orange;
}

.private_method
{
  color: pink;
}

.dependency
{
  color: #9f9fa1;
}

.component
{
  padding: 20 10 20 10;
  margin: 20 10 20 10;
  background-color: #1a1a1c;
}

.component h3
{
}
</style>
</head>
<body>
<h1>Table of Contents</h1>
<ul>
  <li><a href="#quintessence/ArtGalleryOfCats/Elements/Backgrounds/NPCConversations.q.yml">quintessence/ArtGalleryOfCats/Elements/Backgrounds/NPCConversations.q.yml</a></li>
  <li><a href="#quintessence/ArtGalleryOfCats/Elements/DialogBoxRenderers/Bubble.q.yml">quintessence/ArtGalleryOfCats/Elements/DialogBoxRenderers/Bubble.q.yml</a></li>
  <li><a href="#quintessence/ArtGalleryOfCats/Gameplay/Entities/Base.q.yml">quintessence/ArtGalleryOfCats/Gameplay/Entities/Base.q.yml</a></li>
  <li><a href="#quintessence/ArtGalleryOfCats/Gameplay/Entities/Camera3D.q.yml">quintessence/ArtGalleryOfCats/Gameplay/Entities/Camera3D.q.yml</a></li>
  <li><a href="#quintessence/ArtGalleryOfCats/Gameplay/Entities/CollisionTileMap.q.yml">quintessence/ArtGalleryOfCats/Gameplay/Entities/CollisionTileMap.q.yml</a></li>
  <li><a href="#quintessence/ArtGalleryOfCats/Gameplay/EntityFactory.q.yml">quintessence/ArtGalleryOfCats/Gameplay/EntityFactory.q.yml</a></li>
  <li><a href="#quintessence/ArtGalleryOfCats/Gameplay/EntityFlags.q.yml">quintessence/ArtGalleryOfCats/Gameplay/EntityFlags.q.yml</a></li>
  <li><a href="#quintessence/ArtGalleryOfCats/Gameplay/Level.q.yml">quintessence/ArtGalleryOfCats/Gameplay/Level.q.yml</a></li>
  <li><a href="#quintessence/ArtGalleryOfCats/Gameplay/LevelFactory.q.yml">quintessence/ArtGalleryOfCats/Gameplay/LevelFactory.q.yml</a></li>
  <li><a href="#quintessence/ArtGalleryOfCats/Gameplay/Riddle.q.yml">quintessence/ArtGalleryOfCats/Gameplay/Riddle.q.yml</a></li>
  <li><a href="#quintessence/ArtGalleryOfCats/Gameplay/SceneRenderer.q.yml">quintessence/ArtGalleryOfCats/Gameplay/SceneRenderer.q.yml</a></li>
  <li><a href="#quintessence/ArtGalleryOfCats/Gameplay/Screen.q.yml">quintessence/ArtGalleryOfCats/Gameplay/Screen.q.yml</a></li>
  <li><a href="#quintessence/ArtGalleryOfCats/Gameplay/TMJObjectLoader.q.yml">quintessence/ArtGalleryOfCats/Gameplay/TMJObjectLoader.q.yml</a></li>
  <li><a href="#quintessence/ArtGalleryOfCats/Runner.q.yml">quintessence/ArtGalleryOfCats/Runner.q.yml</a></li>
  <li><a href="#quintessence/ArtGalleryOfCats/Screens/UserTextInput.q.yml">quintessence/ArtGalleryOfCats/Screens/UserTextInput.q.yml</a></li>
</ul>
<h1>Components</h1>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/ArtGalleryOfCats/Elements/Backgrounds/NPCConversations.q.yml">quintessence/ArtGalleryOfCats/Elements/Backgrounds/NPCConversations.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">dialog_bubble_bitmap_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">inv_scale</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">capture</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">DEFAULT_INV_SCALE</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_inv_scale</b>(int inv_scale=DEFAULT_INV_SCALE)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>destroy</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>refresh_capture</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ScreenCapture&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ScreenCapture.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/ArtGalleryOfCats/Elements/DialogBoxRenderers/Bubble.q.yml">quintessence/ArtGalleryOfCats/Elements/DialogBoxRenderers/Bubble.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">current_page_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">font_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_padding_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">text_padding_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">num_revealed_characters</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">is_finished</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">page_is_finished</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">page_finished_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">at_last_page</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">age</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">DEFAULT_FONT_NAME</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_FONT_SIZE</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_special_state_empty_text</b>(float width=1, float height=1)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>draw_action_text</b>(std::string text=&quot;[unset-action-text]&quot;, float width=1, float height=1)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>draw_styled_revealed_text</b>(float max_width=1, std::string text=&quot;[unset-text]&quot;, int num_revealed_characters=999)</td>
</tr>
<tr>
  <td class="private_method">std::string</td>
  <td class="private_method"><b>concat_text</b>(std::string source_text=&quot;&quot;, int length=0)</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_dialog_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_current_display&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Base*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Basic*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxFrame&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxFrame.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogButton&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogButton.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Interpolators::*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::DialogBoxes::Basic&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/DialogBoxes/Basic.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Interpolators::&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Interpolators.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/ArtGalleryOfCats/Gameplay/Entities/Base.q.yml">quintessence/ArtGalleryOfCats/Gameplay/Entities/Base.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">model</td>
  <td class="property">AllegroFlare::Model3D*</td>
</tr>
<tr>
  <td class="property">texture</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">placement</td>
  <td class="property">AllegroFlare::Placement3D</td>
</tr>
<tr>
  <td class="property">velocity</td>
  <td class="property">AllegroFlare::Placement3D</td>
</tr>
<tr>
  <td class="property">hit_box_2d</td>
  <td class="property">AllegroFlare::Physics::AABB2D</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SceneGraph::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SceneGraph/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Model3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Model3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::AABB2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/AABB2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/ArtGalleryOfCats/Gameplay/Entities/Camera3D.q.yml">quintessence/ArtGalleryOfCats/Gameplay/Entities/Camera3D.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ArtGalleryOfCats::Gameplay::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;ArtGalleryOfCats/Gameplay/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera3D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/ArtGalleryOfCats/Gameplay/Entities/CollisionTileMap.q.yml">quintessence/ArtGalleryOfCats/Gameplay/Entities/CollisionTileMap.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">collision_tile_map</td>
  <td class="property">AllegroFlare::TileMaps::TileMap&lt;int&gt;</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ArtGalleryOfCats::Gameplay::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;ArtGalleryOfCats/Gameplay/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/ArtGalleryOfCats/Gameplay/EntityFactory.q.yml">quintessence/ArtGalleryOfCats/Gameplay/EntityFactory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">model_bin</td>
  <td class="property">AllegroFlare::ModelBin*</td>
</tr>
<tr>
  <td class="property">DEFAULT_WALL_ART_SCALE</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">ArtGalleryOfCats::Gameplay::Entities::Base*</td>
  <td class="method"><b>create_sculpture_art</b>(std::string art_identifier=&quot;[unset-art_identifier]&quot;, std::string model_filename=&quot;[unset-model_filename]&quot;, std::string texture_filename=&quot;[unset-texture_filename]&quot;, AllegroFlare::Vec3D model_position={}, float model_rotation_y=0.0f, AllegroFlare::Physics::AABB2D hit_box_2d={}, std::vector&lt;std::string&gt; additional_entity_flags={})</td>
</tr>
<tr>
  <td class="method">ArtGalleryOfCats::Gameplay::Entities::Base*</td>
  <td class="method"><b>create_wall_art</b>(std::string art_identifier=&quot;[unset-art_identifier]&quot;, std::string texture_filename=&quot;[unset-texture_filename]&quot;, AllegroFlare::Vec3D model_position={}, float model_rotation_y=0.0f, float art_scale=DEFAULT_WALL_ART_SCALE, AllegroFlare::Physics::AABB2D hit_box_2d={}, std::vector&lt;std::string&gt; additional_entity_flags={})</td>
</tr>
<tr>
  <td class="method">ArtGalleryOfCats::Gameplay::Entities::Base*</td>
  <td class="method"><b>create_environment_mesh</b>(std::string model_filename=&quot;[unset-model_filename]&quot;, std::string texture_filename=&quot;[unset-texture_filename]&quot;)</td>
</tr>
<tr>
  <td class="method">ArtGalleryOfCats::Gameplay::Entities::Base*</td>
  <td class="method"><b>create_collectable_object</b>(AllegroFlare::Vec3D position={}, std::string model_filename=&quot;[unset-model_filename]&quot;)</td>
</tr>
<tr>
  <td class="method">ArtGalleryOfCats::Gameplay::Entities::Camera3D*</td>
  <td class="method"><b>create_camera</b>()</td>
</tr>
<tr>
  <td class="method">ArtGalleryOfCats::Gameplay::Entities::CollisionTileMap*</td>
  <td class="method"><b>create_collision_tile_map</b>(std::string tmj_filename=&quot;[unset-tmj_filename]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ArtGalleryOfCats::Gameplay::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;ArtGalleryOfCats/Gameplay/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ArtGalleryOfCats::Gameplay::Entities::Camera3D&quot;, &quot;headers&quot;=&gt;[&quot;ArtGalleryOfCats/Gameplay/Entities/Camera3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ArtGalleryOfCats::Gameplay::Entities::CollisionTileMap&quot;, &quot;headers&quot;=&gt;[&quot;ArtGalleryOfCats/Gameplay/Entities/CollisionTileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::Platforming2D::TMJDataLoader&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/Platforming2D/TMJDataLoader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ArtGalleryOfCats::Gameplay::EntityFlags&quot;, &quot;headers&quot;=&gt;[&quot;ArtGalleryOfCats/Gameplay/EntityFlags.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::AABB2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/AABB2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/ArtGalleryOfCats/Gameplay/EntityFlags.q.yml">quintessence/ArtGalleryOfCats/Gameplay/EntityFlags.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">PLAYER_CAN_INTERACT</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">IS_WALL_ART</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">IS_SCULPTURE_ART</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">RENDERS_WITH_IRIDESCENT</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">ART_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DO_NOT_RENDER</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/ArtGalleryOfCats/Gameplay/Level.q.yml">quintessence/ArtGalleryOfCats/Gameplay/Level.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">title</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">entity_pool</td>
  <td class="property">AllegroFlare::SceneGraph::EntityPool</td>
</tr>
<tr>
  <td class="property">current_riddle</td>
  <td class="property">ArtGalleryOfCats::Gameplay::Riddle</td>
</tr>
<tr>
  <td class="property">music_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">riddle_is_solved</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">DEFAULT_MUSIC_IDENTIFIER</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>has_custom_music</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>destroy</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SceneGraph::EntityPool&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SceneGraph/EntityPool.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ArtGalleryOfCats::Gameplay::Riddle&quot;, &quot;headers&quot;=&gt;[&quot;ArtGalleryOfCats/Gameplay/Riddle.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/ArtGalleryOfCats/Gameplay/LevelFactory.q.yml">quintessence/ArtGalleryOfCats/Gameplay/LevelFactory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">model_bin</td>
  <td class="property">AllegroFlare::ModelBin*</td>
</tr>
<tr>
  <td class="property">entity_pool</td>
  <td class="property">AllegroFlare::SceneGraph::EntityPool*</td>
</tr>
<tr>
  <td class="property">riddle</td>
  <td class="property">ArtGalleryOfCats::Gameplay::Riddle*</td>
</tr>
<tr>
  <td class="property">level</td>
  <td class="property">ArtGalleryOfCats::Gameplay::Level*</td>
</tr>
<tr>
  <td class="property">resources_path</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">DEFAULT_RESOURCES_PATH</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>has_non_default_resources_path</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>object_parsed_callback</b>(std::string name_property=&quot;[unset-name_property]&quot;, std::string class_property=&quot;[unset-class_property]&quot;, float x_property=0.0f, float y_property=0.0f, float width_property=0.0f, float height_property=0.0f, bool visible_property=true, std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt; custom_properties={}, void* user_data=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>map_properties_parsed_callback</b>(std::vector&lt;std::tuple&lt;std::string, std::string, std::string&gt;&gt; map_custom_properties={}, void* user_data=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load_gallery_01</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load_gallery_02</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load_gallery_03</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load_primary_map</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ArtGalleryOfCats::Gameplay::EntityFactory&quot;, &quot;headers&quot;=&gt;[&quot;ArtGalleryOfCats/Gameplay/EntityFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SceneGraph::EntityPool&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SceneGraph/EntityPool.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ArtGalleryOfCats::Gameplay::EntityFlags&quot;, &quot;headers&quot;=&gt;[&quot;ArtGalleryOfCats/Gameplay/EntityFlags.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ArtGalleryOfCats::Gameplay::TMJObjectLoader&quot;, &quot;headers&quot;=&gt;[&quot;ArtGalleryOfCats/Gameplay/TMJObjectLoader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ArtGalleryOfCats::Gameplay::LevelFactory&quot;, &quot;headers&quot;=&gt;[&quot;ArtGalleryOfCats/Gameplay/LevelFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ArtGalleryOfCats::Gameplay::Riddle&quot;, &quot;headers&quot;=&gt;[&quot;ArtGalleryOfCats/Gameplay/Riddle.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Errors&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Errors.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ArtGalleryOfCats::Gameplay::Level&quot;, &quot;headers&quot;=&gt;[&quot;ArtGalleryOfCats/Gameplay/Level.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/ArtGalleryOfCats/Gameplay/Riddle.q.yml">quintessence/ArtGalleryOfCats/Gameplay/Riddle.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">riddle_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">riddle_prompt_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">riddle_answer</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>matches_answer</b>(std::string answer_guess=&quot;[unset-answer_guess]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/ArtGalleryOfCats/Gameplay/SceneRenderer.q.yml">quintessence/ArtGalleryOfCats/Gameplay/SceneRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">cubemap_shader</td>
  <td class="property">AllegroFlare::Shaders::Cubemap*</td>
</tr>
<tr>
  <td class="property">entity_pool</td>
  <td class="property">AllegroFlare::SceneGraph::EntityPool*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ArtGalleryOfCats::Gameplay::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;ArtGalleryOfCats/Gameplay/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ArtGalleryOfCats::Gameplay::Entities::Camera3D&quot;, &quot;headers&quot;=&gt;[&quot;ArtGalleryOfCats/Gameplay/Entities/Camera3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SceneGraph::EntityPool&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SceneGraph/EntityPool.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Cubemap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Cubemap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ArtGalleryOfCats::Gameplay::EntityFlags&quot;, &quot;headers&quot;=&gt;[&quot;ArtGalleryOfCats/Gameplay/EntityFlags.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/ArtGalleryOfCats/Gameplay/Screen.q.yml">quintessence/ArtGalleryOfCats/Gameplay/Screen.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">model_bin</td>
  <td class="property">AllegroFlare::ModelBin*</td>
</tr>
<tr>
  <td class="property">resources_path</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">user_text_input_screen</td>
  <td class="property">ArtGalleryOfCats::Screens::UserTextInput*</td>
</tr>
<tr>
  <td class="property">npc_conversations_screen</td>
  <td class="property">AllegroFlare::Screens::Storyboard*</td>
</tr>
<tr>
  <td class="property">solved_level_names</td>
  <td class="property">std::set&lt;std::string&gt;*</td>
</tr>
<tr>
  <td class="property">dialog_node_bank</td>
  <td class="property">AllegroFlare::DialogTree::NodeBank</td>
</tr>
<tr>
  <td class="property">riddle_is_solved</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">riddle_is_showing</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">inspect_hint_is_showing</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">last_user_text_input_value</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">current_level_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">current_level</td>
  <td class="property">ArtGalleryOfCats::Gameplay::Level*</td>
</tr>
<tr>
  <td class="property">player_velocity</td>
  <td class="property">AllegroFlare::Vec2D</td>
</tr>
<tr>
  <td class="property">player_right_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">player_left_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">player_up_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">player_down_pressed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">entity_player_is_currently_colliding_with</td>
  <td class="property">AllegroFlare::SceneGraph::Entities::Base*</td>
</tr>
<tr>
  <td class="property">on_finished_callback_func</td>
  <td class="property">std::function&lt;void(ArtGalleryOfCats::Gameplay::Screen*, void*)&gt;</td>
</tr>
<tr>
  <td class="property">on_finished_callback_func_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">cubemap_shader</td>
  <td class="property">AllegroFlare::Shaders::Cubemap</td>
</tr>
<tr>
  <td class="property">cubemap</td>
  <td class="property">AllegroFlare::Cubemap*</td>
</tr>
<tr>
  <td class="property">HACK_sysname</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_RESOURCES_PATH</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_HACK_SYSNAME</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_event_emitter</b>(AllegroFlare::EventEmitter* event_emitter=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_bitmap_bin</b>(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_font_bin</b>(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_model_bin</b>(AllegroFlare::ModelBin* model_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_resources_path</b>(std::string resources_path=DEFAULT_RESOURCES_PATH)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_user_text_input_screen</b>(ArtGalleryOfCats::Screens::UserTextInput* user_text_input_screen=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_npc_conversations_screen</b>(AllegroFlare::Screens::Storyboard* npc_conversations_screen=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_solved_level_names</b>(std::set&lt;std::string&gt;* solved_level_names=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_HACK_sysname</b>(std::string HACK_sysname=DEFAULT_HACK_SYSNAME)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load_level_by_identifier</b>(std::string level_identifier=&quot;[unset-level_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>start_level_music</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>emit_event_to_set_input_hints_bar_to_room_controls</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>emit_event_to_set_input_hints</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::SceneGraph::EntityPool*</td>
  <td class="method"><b>get_entity_pool</b>()</td>
</tr>
<tr>
  <td class="method">ArtGalleryOfCats::Gameplay::Riddle*</td>
  <td class="method"><b>get_current_riddle</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>load_dialog_node_bank</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_npc_dialog_by_identifier</b>(std::string dialog_node_identifier=&quot;[unset-dialog_node_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_deactivate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>hide_input_hints</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>show_input_hints</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Vec3D</td>
  <td class="method"><b>calculate_strafe_xy</b>(float spin=0.0f, float displacement=0.0f)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Vec3D</td>
  <td class="method"><b>calculate_forward_back_xy</b>(float spin=0.0f, float displacement=0.0f)</td>
</tr>
<tr>
  <td class="method">ArtGalleryOfCats::Gameplay::Entities::Camera3D*</td>
  <td class="method"><b>find_primary_camera</b>()</td>
</tr>
<tr>
  <td class="method">ArtGalleryOfCats::Gameplay::Entities::CollisionTileMap*</td>
  <td class="method"><b>find_collision_tile_map</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update_entity_player_is_currently_colliding_with</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>scene_physics_updater</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>scene_renderer_render</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>render_hud</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_tile_map</b>(AllegroFlare::TileMaps::TileMap&lt;int&gt;* tile_map=nullptr, float tile_width=16.0f, float tile_height=16.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_aabb2d</b>(AllegroFlare::Physics::AABB2D* aabb2d=nullptr, bool adjacent_to_top_edge=false, bool adjacent_to_right_edge=false, bool adjacent_to_bottom_edge=false, bool adjacent_to_left_edge=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>call_on_finished_callback_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_timer_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>player_spin_change</b>(float delta=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>player_tilt_change</b>(float delta=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>player_stop_moving</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Vec2D</td>
  <td class="method"><b>infer_player_velocity_from_keypress</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_up_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_down_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_npc_conversations_screen</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>find_custom_dialog_for_this_inspect</b>(AllegroFlare::SceneGraph::Entities::Base* entity_inspecting_on=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>interact_with_focused_object</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>attempt_to_solve_riddle</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>toggle_riddle_visibility</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>hide_riddle</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>show_inspect_hint</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>hide_inspect_hint</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_axis_change_func</b>(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>emit_event_to_return_to_the_level_select_screen</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>key_down_func</b>(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>key_up_func</b>(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>mouse_down_func</b>(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>mouse_axes_func</b>(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::StoryboardPages::ImageWithAdvancingText*</td>
  <td class="method"><b>create_image_page</b>(std::string text=&quot;[unset-text]&quot;)</td>
</tr>
<tr>
  <td class="method">ALLEGRO_FONT*</td>
  <td class="method"><b>obtain_riddle_font</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_FONT*</td>
  <td class="method"><b>obtain_inspect_hint_icon_font</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_FONT*</td>
  <td class="method"><b>obtain_inspect_hint_text_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::ImageWithAdvancingText&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/ImageWithAdvancingText.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ArtGalleryOfCats::Gameplay::Screen&quot;, &quot;headers&quot;=&gt;[&quot;ArtGalleryOfCats/Gameplay/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SceneGraph::EntityPool&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SceneGraph/EntityPool.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ArtGalleryOfCats::Gameplay::EntityFactory&quot;, &quot;headers&quot;=&gt;[&quot;ArtGalleryOfCats/Gameplay/EntityFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ArtGalleryOfCats::Gameplay::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;ArtGalleryOfCats/Gameplay/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ArtGalleryOfCats::Gameplay::Entities::Camera3D&quot;, &quot;headers&quot;=&gt;[&quot;ArtGalleryOfCats/Gameplay/Entities/Camera3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::GenericController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/GenericController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::TileMapCollisionStepper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/TileMapCollisionStepper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::TileMaps::TileMap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/TileMaps/TileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Physics::AABB2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Physics/AABB2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ArtGalleryOfCats::Gameplay::LevelFactory&quot;, &quot;headers&quot;=&gt;[&quot;ArtGalleryOfCats/Gameplay/LevelFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ArtGalleryOfCats::Gameplay::Entities::CollisionTileMap&quot;, &quot;headers&quot;=&gt;[&quot;ArtGalleryOfCats/Gameplay/Entities/CollisionTileMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ArtGalleryOfCats::Gameplay::SceneRenderer&quot;, &quot;headers&quot;=&gt;[&quot;ArtGalleryOfCats/Gameplay/SceneRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Cubemap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Cubemap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Cubemap&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Cubemap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::CubemapBuilder&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/CubemapBuilder.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::RouteEventDatas::ActivateScreenByIdentifier&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/RouteEventDatas/ActivateScreenByIdentifier.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Routers::Standard&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Routers/Standard.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SceneGraph::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SceneGraph/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ArtGalleryOfCats::Gameplay::EntityFlags&quot;, &quot;headers&quot;=&gt;[&quot;ArtGalleryOfCats/Gameplay/EntityFlags.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ArtGalleryOfCats::Screens::UserTextInput&quot;, &quot;headers&quot;=&gt;[&quot;ArtGalleryOfCats/Screens/UserTextInput.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ArtGalleryOfCats::Gameplay::Riddle&quot;, &quot;headers&quot;=&gt;[&quot;ArtGalleryOfCats/Gameplay/Riddle.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ArtGalleryOfCats::Gameplay::Level&quot;, &quot;headers&quot;=&gt;[&quot;ArtGalleryOfCats/Gameplay/Level.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Storyboard&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Storyboard.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeBank&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeBank.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes/Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::MultipageWithOptions&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/MultipageWithOptions.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/ArtGalleryOfCats/Gameplay/TMJObjectLoader.q.yml">quintessence/ArtGalleryOfCats/Gameplay/TMJObjectLoader.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">loaded</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">object_parsed_callback</td>
  <td class="property">std::function&lt;void(std::string, std::string, float, float, float, float, bool, std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;, void*)&gt;</td>
</tr>
<tr>
  <td class="property">object_parsed_callback_user_data</td>
  <td class="property">void*</td>
</tr>
<tr>
  <td class="property">map_properties_parsed_callback</td>
  <td class="property">std::function&lt;void(std::vector&lt;std::tuple&lt;std::string, std::string, std::string&gt;&gt;, void*)&gt;</td>
</tr>
<tr>
  <td class="property">map_properties_parsed_callback_user_data</td>
  <td class="property">void*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load</b>()</td>
</tr>
<tr>
  <td class="private_method">bool</td>
  <td class="private_method"><b>file_exists</b>(std::string filename=&quot;[unset-filename]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;nlohmann::json&quot;, &quot;headers&quot;=&gt;[&quot;lib/nlohmann/json.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::exists&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::ifstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Errors&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Errors.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::function&quot;, &quot;headers&quot;=&gt;[&quot;functional&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/ArtGalleryOfCats/Runner.q.yml">quintessence/ArtGalleryOfCats/Runner.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">framework</td>
  <td class="property">AllegroFlare::Frameworks::Full*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">model_bin</td>
  <td class="property">AllegroFlare::ModelBin*</td>
</tr>
<tr>
  <td class="property">resources_path</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">router</td>
  <td class="property">AllegroFlare::Routers::Standard</td>
</tr>
<tr>
  <td class="property">intro_logos_screen</td>
  <td class="property">AllegroFlare::Screens::Storyboard</td>
</tr>
<tr>
  <td class="property">intro_storyboard_screen</td>
  <td class="property">AllegroFlare::Screens::Storyboard</td>
</tr>
<tr>
  <td class="property">title_screen</td>
  <td class="property">AllegroFlare::Screens::TitleScreen</td>
</tr>
<tr>
  <td class="property">achievements_screen</td>
  <td class="property">AllegroFlare::Screens::Achievements</td>
</tr>
<tr>
  <td class="property">version_screen</td>
  <td class="property">AllegroFlare::Screens::Version</td>
</tr>
<tr>
  <td class="property">new_game_intro_storyboard_screen</td>
  <td class="property">AllegroFlare::Screens::Storyboard</td>
</tr>
<tr>
  <td class="property">level_select_screen</td>
  <td class="property">AllegroFlare::Screens::LevelSelectScreen</td>
</tr>
<tr>
  <td class="property">game_over_screen</td>
  <td class="property">AllegroFlare::Screens::GameOverScreen</td>
</tr>
<tr>
  <td class="property">game_won_screen</td>
  <td class="property">AllegroFlare::Screens::GameWonScreen</td>
</tr>
<tr>
  <td class="property">npc_conversations_screen</td>
  <td class="property">AllegroFlare::Screens::Storyboard</td>
</tr>
<tr>
  <td class="property">user_text_input_screen</td>
  <td class="property">ArtGalleryOfCats::Screens::UserTextInput</td>
</tr>
<tr>
  <td class="property">game_won_outro_storyboard_screen</td>
  <td class="property">AllegroFlare::Screens::Storyboard</td>
</tr>
<tr>
  <td class="property">rolling_credits_screen</td>
  <td class="property">AllegroFlare::Screens::RollingCredits</td>
</tr>
<tr>
  <td class="property">primary_gameplay_screen</td>
  <td class="property">ArtGalleryOfCats::Gameplay::Screen</td>
</tr>
<tr>
  <td class="property">title_image_background</td>
  <td class="property">AllegroFlare::Elements::Backgrounds::Image</td>
</tr>
<tr>
  <td class="property">solid_black_background</td>
  <td class="property">AllegroFlare::Elements::Backgrounds::ClearToColor</td>
</tr>
<tr>
  <td class="property">light_blue_background</td>
  <td class="property">AllegroFlare::Elements::Backgrounds::ClearToColor</td>
</tr>
<tr>
  <td class="property">npc_conversations_background</td>
  <td class="property">ArtGalleryOfCats::Elements::Backgrounds::NPCConversations</td>
</tr>
<tr>
  <td class="property">levels_list</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">solved_level_names</td>
  <td class="property">std::set&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">release_info</td>
  <td class="property">ReleaseInfo</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">NPC_CONVERSATIONS_SCREEN</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">USER_TEXT_INPUT_SCREEN</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">EVENT_ACTIVATE_PRIMARY_GAMEPLAY_SCREEN</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>setup_router</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>run</b>(std::string deployment_environment_mode=&quot;[unset-deployment_environment_mode]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>game_event_func</b>(AllegroFlare::GameEvent* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::StoryboardPages::ImageWithAdvancingText*</td>
  <td class="method"><b>create_image_page</b>(std::string text=&quot;[unset-text]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Frameworks::Full&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Frameworks/Full.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEvent&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;CubeShooter::Screen&quot;, &quot;headers&quot;=&gt;[&quot;CubeShooter/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Routers::Standard&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Routers/Standard.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Storyboard&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Storyboard.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Achievements&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Achievements.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::TitleScreen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/TitleScreen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::GameOverScreen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/GameOverScreen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::GameWonScreen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/GameWonScreen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::RollingCredits&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/RollingCredits.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Version&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Version.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Achievements&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Achievements.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::StoryboardFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/StoryboardFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::LevelSelectScreen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/LevelSelectScreen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::RouteEventDatas::StartLevel&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/RouteEventDatas/StartLevel.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ArtGalleryOfCats::Gameplay::Screen&quot;, &quot;headers&quot;=&gt;[&quot;ArtGalleryOfCats/Gameplay/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::ClearToColor&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/ClearToColor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ReleaseInfo&quot;, &quot;headers&quot;=&gt;[&quot;ReleaseInfo.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ArtGalleryOfCats::Elements::Backgrounds::NPCConversations&quot;, &quot;headers&quot;=&gt;[&quot;ArtGalleryOfCats/Elements/Backgrounds/NPCConversations.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::ImageWithAdvancingText&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/ImageWithAdvancingText.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ArtGalleryOfCats::Screens::UserTextInput&quot;, &quot;headers&quot;=&gt;[&quot;ArtGalleryOfCats/Screens/UserTextInput.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::RollingCredits::SectionFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/RollingCredits/SectionFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SystemInfo&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SystemInfo.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Image&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Image.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/ArtGalleryOfCats/Screens/UserTextInput.q.yml">quintessence/ArtGalleryOfCats/Screens/UserTextInput.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">software_keyboard</td>
  <td class="property">AllegroFlare::SoftwareKeyboard::SoftwareKeyboard</td>
</tr>
<tr>
  <td class="property">background</td>
  <td class="property">AllegroFlare::Elements::Backgrounds::Base*</td>
</tr>
<tr>
  <td class="property">mode</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">MODE_USING_VIRTUAL_CONTROLS</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">MODE_USING_KEYBOARD</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_deactivate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_timer_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_font_name</b>(std::string font_name=AllegroFlare::SoftwareKeyboard::SoftwareKeyboard::DEFAULT_FONT_NAME)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_font_size</b>(int font_size=1)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_prompt_text</b>(std::string prompt_text=&quot;[unset-prompt_text]&quot;)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_result_string_value</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_event_to_emit_on_pressing_submit_key</b>(std::string event_to_emit_on_pressing_submit_key=AllegroFlare::SoftwareKeyboard::SoftwareKeyboard::DEFAULT_EVENT_TO_EMIT_ON_PRESSING_SUBMIT_KEY)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>mode_is_using_keyboard</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>mode_is_using_virtual_controls</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_mode_to_using_keyboard</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_mode_to_using_virtual_controls</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_down_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>key_char_func</b>(ALLEGRO_EVENT* event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::SoftwareKeyboard::SoftwareKeyboard&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/SoftwareKeyboard/SoftwareKeyboard.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::GenericController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/GenericController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<h1>Dependents</h1>
<pre>
{
  "ALLEGRO_BITMAP": [
    "ArtGalleryOfCats/Elements/Backgrounds/NPCConversations",
    "ArtGalleryOfCats/Gameplay/Entities/Base"
  ],
  "AllegroFlare/Elements/Backgrounds/Base": [
    "ArtGalleryOfCats/Elements/Backgrounds/NPCConversations",
    "ArtGalleryOfCats/Screens/UserTextInput"
  ],
  "AllegroFlare/ScreenCapture": [
    "ArtGalleryOfCats/Elements/Backgrounds/NPCConversations"
  ],
  "AllegroFlare/BitmapBin": [
    "ArtGalleryOfCats/Elements/Backgrounds/NPCConversations",
    "ArtGalleryOfCats/Elements/DialogBoxRenderers/Bubble",
    "ArtGalleryOfCats/Gameplay/EntityFactory",
    "ArtGalleryOfCats/Gameplay/LevelFactory",
    "ArtGalleryOfCats/Gameplay/Screen",
    "ArtGalleryOfCats/Runner"
  ],
  "ALLEGRO_FONT": [
    "ArtGalleryOfCats/Elements/DialogBoxRenderers/Bubble",
    "ArtGalleryOfCats/Elements/DialogBoxRenderers/Bubble",
    "ArtGalleryOfCats/Gameplay/Screen"
  ],
  "al_is_system_installed": [
    "ArtGalleryOfCats/Elements/DialogBoxRenderers/Bubble"
  ],
  "al_get_current_display": [
    "ArtGalleryOfCats/Elements/DialogBoxRenderers/Bubble"
  ],
  "al_color_html": [
    "ArtGalleryOfCats/Elements/DialogBoxRenderers/Bubble",
    "ArtGalleryOfCats/Gameplay/Screen"
  ],
  "al_is_primitives_addon_initialized": [
    "ArtGalleryOfCats/Elements/DialogBoxRenderers/Bubble",
    "ArtGalleryOfCats/Gameplay/Screen"
  ],
  "al_draw_filled_rounded_rectangle": [
    "ArtGalleryOfCats/Elements/DialogBoxRenderers/Bubble"
  ],
  "AllegroFlare/FontBin": [
    "ArtGalleryOfCats/Elements/DialogBoxRenderers/Bubble",
    "ArtGalleryOfCats/Elements/DialogBoxRenderers/Bubble",
    "ArtGalleryOfCats/Gameplay/EntityFactory",
    "ArtGalleryOfCats/Gameplay/Screen",
    "ArtGalleryOfCats/Runner",
    "ArtGalleryOfCats/Screens/UserTextInput"
  ],
  "AllegroFlare/Elements/DialogBoxes/Base": [
    "ArtGalleryOfCats/Elements/DialogBoxRenderers/Bubble"
  ],
  "AllegroFlare/Elements/DialogBoxes/Basic": [
    "ArtGalleryOfCats/Elements/DialogBoxRenderers/Bubble",
    "ArtGalleryOfCats/Elements/DialogBoxRenderers/Bubble"
  ],
  "AllegroFlare/Placement2D": [
    "ArtGalleryOfCats/Elements/DialogBoxRenderers/Bubble"
  ],
  "AllegroFlare/Elements/DialogBoxFrame": [
    "ArtGalleryOfCats/Elements/DialogBoxRenderers/Bubble"
  ],
  "AllegroFlare/Elements/DialogButton": [
    "ArtGalleryOfCats/Elements/DialogBoxRenderers/Bubble"
  ],
  "AllegroFlare/Interpolators/": [
    "ArtGalleryOfCats/Elements/DialogBoxRenderers/Bubble",
    "ArtGalleryOfCats/Elements/DialogBoxRenderers/Bubble"
  ],
  "AllegroFlare/SceneGraph/Entities/Base": [
    "ArtGalleryOfCats/Gameplay/Entities/Base",
    "ArtGalleryOfCats/Gameplay/Screen"
  ],
  "AllegroFlare/Model3D": [
    "ArtGalleryOfCats/Gameplay/Entities/Base"
  ],
  "AllegroFlare/Placement3D": [
    "ArtGalleryOfCats/Gameplay/Entities/Base"
  ],
  "AllegroFlare/Physics/AABB2D": [
    "ArtGalleryOfCats/Gameplay/Entities/Base",
    "ArtGalleryOfCats/Gameplay/EntityFactory",
    "ArtGalleryOfCats/Gameplay/Screen"
  ],
  "ArtGalleryOfCats/Gameplay/Entities/Base": [
    "ArtGalleryOfCats/Gameplay/Entities/Camera3D",
    "ArtGalleryOfCats/Gameplay/Entities/CollisionTileMap",
    "ArtGalleryOfCats/Gameplay/EntityFactory",
    "ArtGalleryOfCats/Gameplay/SceneRenderer",
    "ArtGalleryOfCats/Gameplay/Screen"
  ],
  "AllegroFlare/Camera3D": [
    "ArtGalleryOfCats/Gameplay/Entities/Camera3D",
    "ArtGalleryOfCats/Gameplay/Screen"
  ],
  "AllegroFlare/TileMaps/TileMap": [
    "ArtGalleryOfCats/Gameplay/Entities/CollisionTileMap",
    "ArtGalleryOfCats/Gameplay/Screen"
  ],
  "AllegroFlare/ModelBin": [
    "ArtGalleryOfCats/Gameplay/EntityFactory",
    "ArtGalleryOfCats/Gameplay/LevelFactory",
    "ArtGalleryOfCats/Gameplay/Screen",
    "ArtGalleryOfCats/Runner"
  ],
  "ArtGalleryOfCats/Gameplay/Entities/Camera3D": [
    "ArtGalleryOfCats/Gameplay/EntityFactory",
    "ArtGalleryOfCats/Gameplay/SceneRenderer",
    "ArtGalleryOfCats/Gameplay/Screen"
  ],
  "ArtGalleryOfCats/Gameplay/Entities/CollisionTileMap": [
    "ArtGalleryOfCats/Gameplay/EntityFactory",
    "ArtGalleryOfCats/Gameplay/Screen"
  ],
  "AllegroFlare/Prototypes/Platforming2D/TMJDataLoader": [
    "ArtGalleryOfCats/Gameplay/EntityFactory"
  ],
  "AllegroFlare/Vec3D": [
    "ArtGalleryOfCats/Gameplay/EntityFactory",
    "ArtGalleryOfCats/Gameplay/Screen"
  ],
  "ArtGalleryOfCats/Gameplay/EntityFlags": [
    "ArtGalleryOfCats/Gameplay/EntityFactory",
    "ArtGalleryOfCats/Gameplay/LevelFactory",
    "ArtGalleryOfCats/Gameplay/SceneRenderer",
    "ArtGalleryOfCats/Gameplay/Screen"
  ],
  "AllegroFlare/SceneGraph/EntityPool": [
    "ArtGalleryOfCats/Gameplay/Level",
    "ArtGalleryOfCats/Gameplay/LevelFactory",
    "ArtGalleryOfCats/Gameplay/SceneRenderer",
    "ArtGalleryOfCats/Gameplay/Screen"
  ],
  "ArtGalleryOfCats/Gameplay/Riddle": [
    "ArtGalleryOfCats/Gameplay/Level",
    "ArtGalleryOfCats/Gameplay/LevelFactory",
    "ArtGalleryOfCats/Gameplay/Screen"
  ],
  "ArtGalleryOfCats/Gameplay/EntityFactory": [
    "ArtGalleryOfCats/Gameplay/LevelFactory",
    "ArtGalleryOfCats/Gameplay/Screen"
  ],
  "ArtGalleryOfCats/Gameplay/TMJObjectLoader": [
    "ArtGalleryOfCats/Gameplay/LevelFactory"
  ],
  "ArtGalleryOfCats/Gameplay/LevelFactory": [
    "ArtGalleryOfCats/Gameplay/LevelFactory",
    "ArtGalleryOfCats/Gameplay/Screen"
  ],
  "AllegroFlare/Errors": [
    "ArtGalleryOfCats/Gameplay/LevelFactory",
    "ArtGalleryOfCats/Gameplay/TMJObjectLoader"
  ],
  "ArtGalleryOfCats/Gameplay/Level": [
    "ArtGalleryOfCats/Gameplay/LevelFactory",
    "ArtGalleryOfCats/Gameplay/Screen"
  ],
  "AllegroFlare/Shaders/Cubemap": [
    "ArtGalleryOfCats/Gameplay/SceneRenderer",
    "ArtGalleryOfCats/Gameplay/Screen"
  ],
  "AllegroFlare/Elements/StoryboardPages/ImageWithAdvancingText": [
    "ArtGalleryOfCats/Gameplay/Screen",
    "ArtGalleryOfCats/Runner"
  ],
  "ALLEGRO_COLOR": [
    "ArtGalleryOfCats/Gameplay/Screen",
    "ArtGalleryOfCats/Runner"
  ],
  "ALLEGRO_EVENT": [
    "ArtGalleryOfCats/Gameplay/Screen",
    "ArtGalleryOfCats/Screens/UserTextInput"
  ],
  "AllegroFlare/Screens/Base": [
    "ArtGalleryOfCats/Gameplay/Screen",
    "ArtGalleryOfCats/Runner",
    "ArtGalleryOfCats/Screens/UserTextInput"
  ],
  "AllegroFlare/EventEmitter": [
    "ArtGalleryOfCats/Gameplay/Screen",
    "ArtGalleryOfCats/Runner",
    "ArtGalleryOfCats/Screens/UserTextInput"
  ],
  "AllegroFlare/Player": [
    "ArtGalleryOfCats/Gameplay/Screen",
    "ArtGalleryOfCats/Screens/UserTextInput"
  ],
  "AllegroFlare/VirtualControllers/Base": [
    "ArtGalleryOfCats/Gameplay/Screen",
    "ArtGalleryOfCats/Screens/UserTextInput"
  ],
  "ArtGalleryOfCats/Gameplay/Screen": [
    "ArtGalleryOfCats/Gameplay/Screen",
    "ArtGalleryOfCats/Runner"
  ],
  "AllegroFlare/VirtualControllers/GenericController": [
    "ArtGalleryOfCats/Gameplay/Screen",
    "ArtGalleryOfCats/Screens/UserTextInput"
  ],
  "AllegroFlare/Physics/TileMapCollisionStepper": [
    "ArtGalleryOfCats/Gameplay/Screen"
  ],
  "AllegroFlare/Camera2D": [
    "ArtGalleryOfCats/Gameplay/Screen"
  ],
  "ArtGalleryOfCats/Gameplay/SceneRenderer": [
    "ArtGalleryOfCats/Gameplay/Screen"
  ],
  "AllegroFlare/Cubemap": [
    "ArtGalleryOfCats/Gameplay/Screen"
  ],
  "AllegroFlare/CubemapBuilder": [
    "ArtGalleryOfCats/Gameplay/Screen"
  ],
  "AllegroFlare/RouteEventDatas/ActivateScreenByIdentifier": [
    "ArtGalleryOfCats/Gameplay/Screen"
  ],
  "AllegroFlare/Routers/Standard": [
    "ArtGalleryOfCats/Gameplay/Screen",
    "ArtGalleryOfCats/Runner"
  ],
  "AllegroFlare/EventNames": [
    "ArtGalleryOfCats/Gameplay/Screen"
  ],
  "AllegroFlare/Vec2D": [
    "ArtGalleryOfCats/Gameplay/Screen"
  ],
  "ArtGalleryOfCats/Screens/UserTextInput": [
    "ArtGalleryOfCats/Gameplay/Screen",
    "ArtGalleryOfCats/Runner"
  ],
  "AllegroFlare/Screens/Storyboard": [
    "ArtGalleryOfCats/Gameplay/Screen",
    "ArtGalleryOfCats/Runner"
  ],
  "AllegroFlare/DialogTree/NodeBank": [
    "ArtGalleryOfCats/Gameplay/Screen"
  ],
  "AllegroFlare/DialogTree/Nodes/Base": [
    "ArtGalleryOfCats/Gameplay/Screen"
  ],
  "AllegroFlare/DialogTree/Nodes/MultipageWithOptions": [
    "ArtGalleryOfCats/Gameplay/Screen"
  ],
  "nlohmann/json": [
    "ArtGalleryOfCats/Gameplay/TMJObjectLoader"
  ],
  "std/filesystem/exists": [
    "ArtGalleryOfCats/Gameplay/TMJObjectLoader"
  ],
  "std/ifstream": [
    "ArtGalleryOfCats/Gameplay/TMJObjectLoader"
  ],
  "std/function": [
    "ArtGalleryOfCats/Gameplay/TMJObjectLoader"
  ],
  "AllegroFlare/Frameworks/Full": [
    "ArtGalleryOfCats/Runner"
  ],
  "AllegroFlare/GameEvent": [
    "ArtGalleryOfCats/Runner"
  ],
  "CubeShooter/Screen": [
    "ArtGalleryOfCats/Runner"
  ],
  "AllegroFlare/Screens/Achievements": [
    "ArtGalleryOfCats/Runner"
  ],
  "AllegroFlare/Screens/TitleScreen": [
    "ArtGalleryOfCats/Runner"
  ],
  "AllegroFlare/Screens/GameOverScreen": [
    "ArtGalleryOfCats/Runner"
  ],
  "AllegroFlare/Screens/GameWonScreen": [
    "ArtGalleryOfCats/Runner"
  ],
  "AllegroFlare/Screens/RollingCredits": [
    "ArtGalleryOfCats/Runner"
  ],
  "AllegroFlare/Screens/Version": [
    "ArtGalleryOfCats/Runner"
  ],
  "AllegroFlare/Achievements": [
    "ArtGalleryOfCats/Runner"
  ],
  "AllegroFlare/StoryboardFactory": [
    "ArtGalleryOfCats/Runner"
  ],
  "AllegroFlare/Logger": [
    "ArtGalleryOfCats/Runner"
  ],
  "AllegroFlare/Screens/LevelSelectScreen": [
    "ArtGalleryOfCats/Runner"
  ],
  "AllegroFlare/RouteEventDatas/StartLevel": [
    "ArtGalleryOfCats/Runner"
  ],
  "AllegroFlare/Color": [
    "ArtGalleryOfCats/Runner"
  ],
  "AllegroFlare/Elements/Backgrounds/ClearToColor": [
    "ArtGalleryOfCats/Runner"
  ],
  "ReleaseInfo": [
    "ArtGalleryOfCats/Runner"
  ],
  "ArtGalleryOfCats/Elements/Backgrounds/NPCConversations": [
    "ArtGalleryOfCats/Runner"
  ],
  "AllegroFlare/Elements/RollingCredits/SectionFactory": [
    "ArtGalleryOfCats/Runner"
  ],
  "AllegroFlare/SystemInfo": [
    "ArtGalleryOfCats/Runner"
  ],
  "AllegroFlare/Elements/Backgrounds/Image": [
    "ArtGalleryOfCats/Runner"
  ],
  "AllegroFlare/SoftwareKeyboard/SoftwareKeyboard": [
    "ArtGalleryOfCats/Screens/UserTextInput"
  ]
}
</pre>
</body>